openapi: 3.0.0
info:
  title: Pingwire API
  version: 1.0.0
  description: |
    The Pingwire API can be used by all our customers. Reach out to get your credentials.

     <a href="mailto:sales@pingwire.io">Become a customer</a>


    # Introduction
    ## Dictionary

    - `ENTITY`: An entity is a subject for investigation e.g an individual, a company, or an asset.
    - `REQUEST`: A request is an enquiry to the system by the user to investigate one or several entities. Initiated manually or through API.
    - `RULE`: Each request triggers a set of user defined rules. Rules can also be executed at regular intervals by the system for continuous monitoring.
    - `PING`: For each rule broken the system creates a Ping. A Ping identifies a unit of suspicious information that needs to be followed up. A Ping can be <em>Confirmed</em>, <em>Resolved</em> or <em>Ignored</em> by the user.

    - `CASE`: Provides the main user interface. A Case collects sets of Pings and related Entities and provides means to investigate and report suspicious activities in bulk.
    - `SEGMENT`: Custom grouping corresponding to a self-defined group structure, e.g. product usage. In addition, segments also correspond to a baseline probability of criminal activity.
    - `RISK CLASS`: Classes partitioned by the probability of an entity committing a crime using self-defined probability intervals.

    ## Unique Identifier
    The Pingwire system strives to ensure the unicity of entities that are inserted in the system in order to help our customers detect complex financial patterns. To do so it is using some fields labeled as "Unique identifiers".

    The system prevents the insertion of duplicated unique identifiers by reusing existing entities as much as possible. Creating a new entity can result on updating an existing one if the payload for the create endpoint contains a unique identifier already present in an existing entity.

    Similarly when inserting a new entity in the system at least one of the unique identifier must be present in the payload so that it can be matched to existing or future entities. An entity without unique identifier would be useless in the system as it would never be able to be matched to past or future activity/behaviour/information.

    ## Sequence Diagram

    <img src="assets/seq-diagram.svg"  />

    ## Request flowchart
    The following flowchart illustrates a typical request process.

    <img src="assets/Request_flowchart.png" width="60%" style="margin-left: 15%" />

    # Test objects

    The Pingwire system provides two rules which can be used for test purposes: "Test Review" and "Test Block". When these rules are published for a specific process, they will trigger for every requests sent on that process which has a targetted entity in the list of test objects bellow. These rules can therefore be used to test the integration for a specific recommendation or even a specific signal (if signals are used on the test rules). 

    |   | Environment | Identification | Entity type  | Recommendation | Create ping |
    |---|------------|--------------------------------|--------------|----------------|-------------|
    | 1 |   staging  |          Ssn <span>&#8594;</span>  201912072392          |  Individual  |      block     |     true    |
    | 2 |   staging  |          Ssn <span>&#8594;</span> 201912302385          |  Individual  |     review     |     true    |
    | 3 |   staging  |          Org. nr. <span>&#8594;</span> 5599887766          |  Business  |      block     |     true    |
    | 4 |   staging  |          Org. nr. <span>&#8594;</span> 5566778899          |  Business  |     review     |     true    |
    | 5 |   staging  |          Reg. nr. <span>&#8594;</span> AAA111          |  Car  |      block     |     true    |
    | 6 |   staging  |          Reg. nr. <span>&#8594;</span> ABC123          |  Car  |     review     |     true    |
  x-logo:
    url: ./assets/pingwire-logo.svg
    altText: Pingwire
    href: https://www.pingwire.io
  license:
    name: Commercial - Subscription Required
    url: https://www.pingwire.io/contact-us
servers:
  - url: https://api.pingwire.io
    description: Production server
  - url: https://api.staging.pingwire.io
    description: Staging server
tags:
  - name: Forms
    description: |
      ## Introduction to forms

      Forms can be used to collect information from the end user either manually or fully automated.

      Forms are configured on demand by submitting a new specification to Pingwire. Once the form has been configured you will receive a `formId`. The `formId` is an identification for this specific form configuration which has been implemented. You will need the `formId` when using our API to automate the process of sending out forms.

      A typical flow for this feature will look like this:
      - Get notified that it is time to send a form to the end user, this can be based on any custom logic on your side. It can for example be as a reaction to a signal present in the recommendation from a request that was sent in to Pingwire.
      - Call the [Get form link](#tag/Forms/paths/~1forms~1%7BformId%7D~1%7BentityId%7D~1link/get) endpoint to retrieve a unique link for that `formId` and end user
      - Present the end user with that link through whichever setup is relevant (See the [Setups for presenting forms](#section/Setups-for-presenting-forms) section below for more details about the different options)
      - Once the end user has filled in the form, continue with the rest of the end user journey
      - Access the answers left by the end user either through API using the [Get form answer](#tag/Forms/paths/~1form-answers~1%7BformAnswerId%7D/get) endpoint or directly through the interface. Rules can be configured to use these answers in the interface.

      ## Setups for presenting forms

      ### Standalone

      In the standalone setup, the form URL retrieved using the [Get form link](#tag/Forms/paths/~1forms~1%7BformId%7D~1%7BentityId%7D~1link/get) endpoint (or from the interface) can be used without modifications and sent to the end user in whichever way is relevant. It can for example be sent by email, text message or even be presented as a QR code for end users to scan.

      When the end user finishes to fill in the form, the submitted answers will be saved, the end user is redirected to a "Thank you" page and invited to close their browser. At the moment it is not possible to get notified when a form has been submitted when using this setup.

      This setup is particularly well adapted for manual sending out of forms or when the end user should fill in a form in isolation from any other end user journey.

      ### Redirect flow

      In the redirect flow setup, the end user will be redirected to the form URL and after all their answers have been submitted they will be redirected back to a callback URL provided by you. This setup is adapted to be used as part of an existing end user journey where the form should be inserted as part of a unified and cohesive experience.

      In order to use that setup, the end user should be sent to the URL retrieved using the [Get form link](#tag/Forms/paths/~1forms~1%7BformId%7D~1%7BentityId%7D~1link/get) endpoint after it has been extended to include information about the redirection setup. The browser of the end user should be redirected to that URL with the addition of the following query parameters:
      - `redirectUrl`: The callback URL where the end user should be redirected to when the form is completed (or cancelled). For security reasons, redirectUrl must be whitelisted as part of the form setup. If you would like to update the redirect URL reach out to Pingwire to update the whitelist.
      - `state`: Any information that represent the state of the end user journey where the form is inserted. The state will be sent back to the redirect URL which can then be used to resume the end user journey on your side wherever it got interrupted by the form. The state is not required to use the redirect setup but is strongly recommended.


      When the end user is redirected to the callback URL, it will be done with several query parameters:
      - `status`: Will always be present and can be one of the following values:
      |Status|Description|
      |------|-----------|
      |`SUCCESS`|The form has been successfully submitted and the answers have been saved.|
      |`CANCELLED`|The form has been interrupted by the end user who decided to not submit any answers.|
      |`ERROR`|There has been a technical error of some sort and the end user was not able to submit any answers.|
      - `state`: Will be present if a state was provided to the form URL as a query parameter. It will be exactly identical to that provided value.
      - `formAnswerId`: Will only be present if the `status` is `SUCCESS`. This id can be used to retrieve the answers submitted by the end user using the [Get form answer](#tag/Form-answers/paths/~1form-answers~1%7BformAnswerId%7D/get) endpoint.
      - `errorCode`: Will only be present if the `status` is `ERROR`. New code can be introduced at any time so the logic reading these codes should be able to handle an unexpected value. Unexpected values can be handled the same way as the code `unknown`. The possible values as of today are:
      |Error code|Description|
      |----------|-----------|
      |`unknown` |The cause of the error is unknown. In that case it is best to consider the form service to be unavailable at that time and handle that failure accordingly.|
paths:
  /account-entities:
    get:
      tags:
        - Accounts
      summary: List accounts
      operationId: listAccounts
      description: Receive list of accounts saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          schema:
            type: string
            enum:
              - createdAt
              - riskScore
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the accounts list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the accounts list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccountEntity'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Accounts
      summary: Create account
      operationId: createAccount
      description: Created account information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountEntityBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /account-entities/{id}:
    get:
      tags:
        - Accounts
      summary: Get account
      operationId: getAccount
      description: Receive account by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Account object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Accounts
      summary: Update account
      operationId: updateAccount
      parameters:
        - in: path
          name: id
          description: Account object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update account information
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountEntityBodyUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /account-entities/customId/{customId}:
    get:
      tags:
        - Accounts
      summary: Get account by customId
      operationId: getAccountByCustomId
      description: Receive account by customId saved in the database.
      parameters:
        - in: path
          name: customId
          description: customId of the account
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountEntity'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /auth/login:
    post:
      tags:
        - Auth
      summary: Receive access token
      operationId: login
      description: |
        The Pingwire API uses OAuth as an authentication mechanism. This operation allows you to retrieve an access token by posting clientId and clientSecret as request body.

        This token can be used on subsequent API calls to authenticate you. Operations that support or require authentication will expect the access token in an HTTP Authorization header like this: `Authorization: Bearer <access token>`.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - clientId
                - clientSecret
              properties:
                clientId:
                  type: string
                  description: Client ID of the API key
                clientSecret:
                  type: string
                  description: Client secret of the API key
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                required:
                  - token
                  - expires
                properties:
                  token:
                    type: string
                    description: Authentication token. Should be used by the client as a bearer token for all authenticated requests.
                  expires:
                    description: Date when the auth token expires. The token should be cached on the client side until it expires.
                    type: string
                    format: date-time
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security: []
  /individuals:
    get:
      tags:
        - Individuals
      summary: List individuals
      operationId: listIndividuals
      description: Receive list of individuals saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - firstName
              - lastName
              - swedishSocialSecurityNumber
              - riskScore
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the individuals list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the individuals list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Individual'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Individuals
      summary: Create individual
      operationId: createIndividual
      description: Create a new individual.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /individuals/{id}:
    get:
      tags:
        - Individuals
      summary: Get individual
      operationId: getIndividual
      description: Receive individual by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Individual object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Individuals
      summary: Update individual
      operationId: updateIndividual
      parameters:
        - in: path
          name: id
          description: Individual object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a individual.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IndividualBodyUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /individuals/customId/{customId}:
    get:
      tags:
        - Individuals
      summary: Get individual by customId
      operationId: getIndividualByCustomId
      description: Receive individual by customId saved in the database.
      parameters:
        - in: path
          name: customId
          description: customId of the individual
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Individual'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses:
    get:
      tags:
        - Businesses
      summary: List businesses
      operationId: listBusinesses
      description: Receive list of businesses saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - name
              - swedishOrganizationNumber
              - riskScore
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the businesses list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the businesses list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Business'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Businesses
      summary: Create business
      operationId: createBusiness
      description: Create a new business.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses/{id}:
    get:
      tags:
        - Businesses
      summary: Get business
      operationId: getBusiness
      description: Receive business by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Business object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Businesses
      summary: Update businesses
      operationId: updateBusiness
      parameters:
        - in: path
          name: id
          description: Business object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a businesses.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessBodyUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses/customId/{customId}:
    get:
      tags:
        - Businesses
      summary: Get business by customId
      operationId: getBusinessByCustomId
      description: Receive business by customId saved in the database.
      parameters:
        - in: path
          name: customId
          description: customId of the business
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Business'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses/company-information/manual-insert/{id}:
    post:
      tags:
        - Company Information
      summary: Create manual company information
      operationId: createManualCompanyInformation
      description: Create a new manual company information
      parameters:
        - in: path
          name: id
          description: Business object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompanyInformationRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CompanyInformationResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses/beneficial-owners/manual-insert/{id}:
    post:
      tags:
        - Beneficial Owners
      summary: Create manual beneficial owners information
      operationId: createManualBeneficialOwners
      description: Create a new beneficial owners information object
      parameters:
        - in: path
          name: id
          description: Business object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BeneficialOwnersRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BeneficialOwnersResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses/board-members/manual-insert/{id}:
    post:
      tags:
        - Board Members
      summary: Create manual board members information
      operationId: createManualBoardMembers
      description: Create a new board members information object
      parameters:
        - in: path
          name: id
          description: Business object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BoardMembersRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BoardMembersResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /businesses/signatories/manual-insert/{id}:
    post:
      tags:
        - Signatories
      summary: Create manual signatories information
      operationId: createManualSignatories
      description: Create a new signatories information object
      parameters:
        - in: path
          name: id
          description: Business object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignatoriesRequest'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SignatoriesResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cars:
    get:
      tags:
        - Cars
      summary: List cars
      operationId: listCars
      description: Receive list of cars saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - registrationNumber
              - registrationCountry
              - carModel
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the cars list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the cars list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Car'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Cars
      summary: Create cars
      operationId: createCar
      description: Create a new cars.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cars/{id}:
    get:
      tags:
        - Cars
      summary: Get car
      operationId: getCar
      description: Receive car by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Car object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Cars
      summary: Update car
      operationId: updateCar
      parameters:
        - in: path
          name: id
          description: Car object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update car.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarBodyUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cars/customId/{customId}:
    get:
      tags:
        - Cars
      summary: Get car by customId
      operationId: getCarByCustomId
      description: Receive car by customId saved in the database.
      parameters:
        - in: path
          name: customId
          description: customId of the car
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /connections:
    get:
      tags:
        - Connections
      summary: List connections
      operationId: listConnection
      description: Receive list of connections saved in the database.
      parameters:
        - in: query
          name: from
          description: Source entity, used to have all connections with this entity as a source. It cannot be used with entity.
          required: false
          schema:
            type: string
            format: ObjectId
            description: ID of the 'from' entity
            example: 62b9437318fe4517089b2833
        - in: query
          name: to
          description: Target entity, used to have all connections with this entity as a target. It cannot be used with entity.
          required: false
          schema:
            type: string
            format: ObjectId
            description: ID of the 'to' entity
            example: 62b9437318fe4517089b2833
        - in: query
          name: entity
          description: Entity id, used to have all connections for this entity (either source or target of the connection). Must be used with type and cannot be used with from or to.
          required: false
          schema:
            type: string
            format: ObjectId
            description: ID of entity
            example: 62b9437318fe4517089b2833
        - in: query
          name: type
          description: Type of connection.
          required: false
          schema:
            $ref: '#/components/schemas/ConnectionTypes'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Connection'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Connections
      summary: Create connections
      operationId: createConnection
      description: Create a new connections.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConnectionUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Connection'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /connections/{id}:
    delete:
      tags:
        - Connections
      summary: Delete connection
      operationId: deleteConnection
      description: Delete connection by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Connection object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /pings:
    get:
      tags:
        - Pings
      summary: List pings
      operationId: listPings
      description: Receive list of pings saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
              - description
              - entities
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: status
          description: Filter list of pings by status.
          required: false
          example: null
          schema:
            type: string
            enum:
              - pending
              - resolved
              - confirmed
              - ignored
        - in: query
          name: _start
          description: The start number of the pings list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the pings list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ping'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Pings
      summary: Create ping
      operationId: createPing
      description: Create a new ping
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - entities
                - description
                - score
                - riskTimeline
                - caseId
              properties:
                entities:
                  type: array
                  description: List of entities included in the ping
                  items:
                    type: object
                    properties:
                      id:
                        type: string
                        format: ObjectId
                        example: 62b9437318fe4517089b2833
                        externalDocs:
                          description: Unique identifier
                          url: /#section/Introduction/Unique-Identifier
                      type:
                        $ref: '#/components/schemas/EntityTypes'
                description:
                  type: string
                  description: Description of the suspicious information or behaviour detected by the ping
                score:
                  type: number
                  description: Score contribution of the ping
                  minimum: 0
                  maximum: 100
                riskTimeline:
                  type: object
                  description: Timeline describing how the risk score contribution of the ping should evolve over time. The risk contribution will linearly decrease over the timeline.
                  required:
                    - period
                    - amount
                  properties:
                    period:
                      type: string
                      enum:
                        - seconds
                        - minutes
                        - hours
                        - days
                        - months
                        - years
                    amount:
                      type: number
                      minimum: 1
                caseId:
                  type: string
                  format: ObjectId
                  description: ID of the case the ping should be included into
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /pings/{id}:
    get:
      tags:
        - Pings
      summary: Get ping
      operationId: getPing
      description: Receive ping by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Ping object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Pings
      summary: Update ping
      operationId: updatePing
      description: Update a ping
      parameters:
        - in: path
          name: id
          description: Ping object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PingBodyUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /pings/{id}/status:
    put:
      tags:
        - Pings
      summary: Update ping status
      operationId: updatePingStatus
      parameters:
        - in: path
          name: id
          description: Ping object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
                - comment
              properties:
                status:
                  type: string
                  description: New status of the ping
                  enum:
                    - pending
                    - resolved
                    - confirmed
                    - ignored
                comment:
                  type: string
                  description: Explanation for why the status is updated
                score:
                  type: number
                  description: Score contribution to use for this ping. This is only used when status is "confirmed". It is required when status is "confirmed"
                  minimum: 0
                  maximum: 100
                numberOfDaysIgnoreRule:
                  type: number
                  description: Number of days in the future that a similar ping should not be created.
                  minimum: 0
                overrideRecommendation:
                  type: string
                  description: Recommendation to apply for future requests while the rule is ignored. This will only be used for the amount of days specified in "numberOfDaysIgnoreRule"
                  enum:
                    - proceed
                    - review
                    - block
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /pings/{id}/comment:
    put:
      tags:
        - Pings
      summary: Comment on ping
      operationId: commentPing
      parameters:
        - in: path
          name: id
          description: Ping object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: Comment to add on the ping
                origin:
                  type: string
                  format: ObjectId
                  description: ID of the comment to edit with this new comment
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ping'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases:
    get:
      tags:
        - Cases
      summary: List cases
      operationId: listCases
      description: Receive list of cases saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the cases list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the cases list.
          required: false
          example: '10'
          schema:
            type: number
        - in: query
          name: status
          description: Filter list of cases by status. The query parameter can be repeated to filter by multiple statuses.
          required: false
          schema:
            $ref: '#/components/schemas/CaseStatuses'
        - in: query
          name: priority
          description: Filter list of cases by priority. The query parameter can be repeated to filter by multiple priorities.
          required: false
          schema:
            $ref: '#/components/schemas/CasePriorities'
        - in: query
          name: entities
          description: Filter list of cases by entity ID. The query parameter can be repeated to filter by multiple entities.
          required: false
          example: 62b9437318fe4517089b2833
          schema:
            type: string
        - in: query
          name: assignee
          description: Filter list of cases by the member ID that cases are assigned to. Use the value `unassigned` to filter on cases that have not been assigned. The query parameter can be repeated to filter by multiple assignees.
          required: false
          example: 62b9437318fe4517089b2833
          schema:
            type: string
        - in: query
          name: escalatedTo
          description: Filter list of cases by the member ID that cases are escalated to. Use the value `deescalated` to filter on cases that are currently not escalated. The query parameter can be repeated to filter by multiple escalated to members.
          required: false
          example: 62b9437318fe4517089b2833
          schema:
            type: string
        - in: query
          name: tags
          description: Filter list of cases by tag ID. The query parameter can be repeated to filter by multiple tags.
          required: false
          example: 62b9437318fe4517089b2833
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Cases
      summary: Create case
      operationId: createCase
      description: Create a case.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - entityId
                - entityType
              properties:
                entityId:
                  type: string
                  format: ObjectId
                  description: EntityId of the entity to create a case for
                  example: 62b9437318fe4517089b2833
                entityType:
                  $ref: '#/components/schemas/EntityTypes'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases/merge:
    post:
      tags:
        - Cases
      summary: Merge cases
      operationId: mergeCases
      description: Merge cases together. Responds with a new case consisting of the merged cases.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - selectedIds
              properties:
                selectedIds:
                  type: array
                  items:
                    type: string
                    description: list of case object ids to merge.
                    format: ObjectId
                    example: 62b9437318fe4517089b2833
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases/{id}:
    get:
      tags:
        - Cases
      summary: Get case
      operationId: getCase
      description: Receive case by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Case object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases/{id}/attach-entity:
    put:
      tags:
        - Cases
      summary: Attach entity
      operationId: attachEntityToCase
      description: Attach an entity to a case.
      parameters:
        - in: path
          name: id
          description: Case object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - entityId
                - entityType
              properties:
                entityId:
                  type: string
                  format: ObjectId
                  description: EntityId of the entity to attach to the case
                  example: 62b9437318fe4517089b2833
                entityType:
                  $ref: '#/components/schemas/EntityTypes'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases/{id}/detach-entity:
    put:
      tags:
        - Cases
      summary: Detach entity
      operationId: detachEntityToCase
      description: Detach an entity from a case.
      parameters:
        - in: path
          name: id
          description: Case object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - entityId
                - entityType
              properties:
                entityId:
                  type: string
                  format: ObjectId
                  description: EntityId of the entity to detach from the case
                  example: 62b9437318fe4517089b2833
                entityType:
                  $ref: '#/components/schemas/EntityTypes'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases/{id}/status:
    put:
      tags:
        - Cases
      summary: Update case status
      operationId: updateCaseStatus
      parameters:
        - in: path
          name: id
          description: Case object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  $ref: '#/components/schemas/CaseStatuses'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /cases/{id}/comment:
    put:
      tags:
        - Cases
      summary: Comment on case
      operationId: commentCase
      parameters:
        - in: path
          name: id
          description: Case object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: Content of the comment
                origin:
                  type: string
                  format: ObjectId
                  description: ID of the comment to edit with this new comment
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Case'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /requests:
    get:
      tags:
        - Requests
      summary: List requests
      operationId: listRequest
      description: Receive list of requests saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
              - entity
              - requestType
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: recommendation
          description: Filter list of requests by recommendation.
          required: false
          example: null
          schema:
            type: string
            enum:
              - block
              - review
              - proceed
        - in: query
          name: id
          description: Filter list of requests by id of request. Either this query parameter or requestType query parameter must be defined.
          required: false
          example: 679b5a44b82f37f3cf378ea5
          schema:
            type: string
            format: ObjectId
        - in: query
          name: requestType
          description: Filter list of requests by requestType. Either this query parameter or the id query paramter must be defined.
          required: false
          example: transaction
          schema:
            type: string
            enum:
              - transaction
              - carKyc
              - carPurchase
              - individualKyc
              - businessKyc
        - in: query
          name: _start
          description: The start number of the requests list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the requests list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Requests
      summary: Create request
      operationId: createRequest
      description: Create a new request.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestBody'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /requests/{id}:
    get:
      tags:
        - Requests
      summary: Get request by id
      operationId: getRequest
      description: Receive request by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Request object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /requests/customId/{customId}:
    get:
      tags:
        - Requests
      summary: Get request by customId
      operationId: getRequestByCustomId
      description: Retrieve request information by customId
      parameters:
        - in: path
          name: customId
          description: Request customId
          example: abc123
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /requests/{id}/recommendation:
    put:
      tags:
        - Requests
      summary: Update request recommendation
      operationId: updateRequestRecommendation
      description: Update request recommendation from review.
      parameters:
        - in: path
          name: id
          description: Request object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - recommendation
                - comment
              properties:
                recommendation:
                  type: string
                  description: New recommendation for the request
                  enum:
                    - block
                    - proceed
                comment:
                  description: Explanation why the recommendation is updated
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /requests/{id}/comment:
    put:
      tags:
        - Requests
      summary: Comment on request
      operationId: commentRequest
      parameters:
        - in: path
          name: id
          description: Case object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
                  description: Content of the comment
                origin:
                  type: string
                  format: ObjectId
                  description: ID of the comment to edit with this new comment
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /requests/{id}/reprocess:
    put:
      tags:
        - Requests
      summary: Reprocess request
      operationId: reprocessRequest
      description: Reprocess a request that is under `review`.
      parameters:
        - in: path
          name: id
          description: Request object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Request'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /members:
    get:
      tags:
        - Members
      summary: List members
      operationId: listMembers
      description: Receive list of members saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - firstName
              - lastName
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the members list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the members list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Member'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Members
      summary: Create member
      operationId: createMember
      description: Create a new member.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /members/{id}:
    get:
      tags:
        - Members
      summary: Get member
      operationId: getMember
      description: Receive member by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Member object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Members
      summary: Update member
      operationId: updateMember
      parameters:
        - in: path
          name: id
          description: Member object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a member.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /members/activation/{id}:
    put:
      tags:
        - Members
      summary: Update member active status
      operationId: updateMemberActiveStatus
      parameters:
        - in: path
          name: id
          description: Member object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a member activation status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /members/{id}/initiate-reset-password:
    post:
      tags:
        - Members
      summary: Reset member password
      operationId: resetMemberPassword
      parameters:
        - in: path
          name: id
          description: Member object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Initiate a reset password email for a member
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /processes:
    get:
      tags:
        - Processes
      summary: List processes
      operationId: listProcesses
      description: Receive list of processes saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: active
          description: Filter list of processes by active status.
          required: false
          example: true
          schema:
            type: boolean
        - in: query
          name: _start
          description: The start number of the processes list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the processes list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Process'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Processes
      summary: Create process
      operationId: createProcess
      description: Create a new process.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /processes/{id}:
    get:
      tags:
        - Processes
      summary: Get process
      operationId: getProcess
      description: Receive process by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Process object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Processes
      summary: Update process
      operationId: updateProcess
      parameters:
        - in: path
          name: id
          description: Process object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a process.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /processes/activation/{id}:
    put:
      tags:
        - Processes
      summary: Update process active status
      operationId: updateProcessActiveStatus
      parameters:
        - in: path
          name: id
          description: Process object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a process activation status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Process'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /products:
    get:
      tags:
        - Products
      summary: List products
      operationId: listProducts
      description: Receive list of products saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - riskScore
              - createdAt
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the products list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the products list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Products
      summary: Create product
      operationId: createProduct
      description: Create a new product.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /products/{id}:
    get:
      tags:
        - Products
      summary: Get product
      operationId: getProduct
      description: Receive product by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Product object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Products
      summary: Update product
      operationId: updateProduct
      parameters:
        - in: path
          name: id
          description: Product object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a product.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductBodyUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /groups:
    get:
      tags:
        - Groups
      summary: List groups
      operationId: listGroups
      description: Receive list of groups saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: active
          description: Filter list of groups by active status.
          required: false
          example: true
          schema:
            type: boolean
        - in: query
          name: _start
          description: The start number of the groups list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the groups list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Groups
      summary: Create group
      operationId: createGroup
      description: Create a new group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /groups/{id}:
    get:
      tags:
        - Groups
      summary: Get group
      operationId: getGroup
      description: Receive group by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Group object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Groups
      summary: Update group
      operationId: updateGroup
      parameters:
        - in: path
          name: id
          description: Group object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a group.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GroupBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /groups/activation/{id}:
    put:
      tags:
        - Groups
      summary: Update group active status
      operationId: updateGroupActiveStatus
      parameters:
        - in: path
          name: id
          description: Group object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a group activation status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Group'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /risk-classes:
    get:
      tags:
        - Risk Classes
      summary: List risk classes
      operationId: listRiskClasses
      description: Receive list of risk classes saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
              - min
              - max
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: _start
          description: The start number of the risk classes list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the risk classes list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RiskClass'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Risk Classes
      summary: Create risk class
      operationId: createRiskClass
      description: Create a new risk class.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RiskClassBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskClass'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /risk-classes/{id}:
    get:
      tags:
        - Risk Classes
      summary: Get risk class
      operationId: getRiskClass
      description: Receive risk class by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Risk class object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskClass'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Risk Classes
      summary: Update risk class
      operationId: updateRiskClass
      parameters:
        - in: path
          name: id
          description: Risk class object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a risk class.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                min:
                  type: integer
                  description: Between 0 and 99
                max:
                  type: integer
                  description: Between 1 and 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskClass'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Risk Classes
      summary: Delete risk class
      operationId: deleteRiskClass
      parameters:
        - in: path
          name: id
          description: Risk class object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Delete a risk class.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /risk-classes/from-score/{score}:
    get:
      tags:
        - Risk Classes
      summary: Get risk class by score
      operationId: getRiskClassByScore
      description: Receive risk class by score.
      parameters:
        - in: path
          name: score
          example: 23
          required: true
          schema:
            type: integer
            description: Between 0 and 100
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RiskClass'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /risk-classes/interval-coverage:
    get:
      tags:
        - Risk Classes
      summary: Get risk class interval coverage
      operationId: getRiskClassCoverage
      description: Receive risk class coverage status.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  isCoveringAll:
                    type: boolean
                    description: Boolean response if risk classes cover 0 to 100
                  isNotOverlapping:
                    type: boolean
                    description: Boolean response if risk classes are overlapping
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /forms/{formId}/{entityId}/link:
    get:
      tags:
        - Forms
      summary: Get form link
      operationId: getFormLink
      description: Generated a form link by using entity id and form id.
      parameters:
        - in: path
          name: entityId
          description: entity object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
        - in: path
          name: formId
          description: form object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  link:
                    type: string
                  id:
                    type: string
                    format: ObjectId
                    description: form object id
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /form-answers/{formAnswerId}:
    get:
      tags:
        - Form answers
      summary: Get form answer
      operationId: getFormAnswer
      description: Retrieve the answers submitted from a form for a specific entity. The exact specification of the response schema will be refined at a later stage.
      parameters:
        - in: path
          name: formAnswerId
          description: Form answer object id. It can be retrieved as part of the information provided as feedback when the form is submitted. For details on how it is provided, see the section [Setups for presenting forms](#section/Setups-for-presenting-forms)
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormAnswerSaved'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Form answers
      summary: Update form answer
      operationId: updateFormAnswer
      description: Update status of files upload in a form answer.
      parameters:
        - in: path
          name: formAnswerId
          description: Form answer object id. It can be retrieved as part of the information provided as feedback when the form is submitted. For details on how it is provided, see the section [Setups for presenting forms](#section/Setups-for-presenting-forms)
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormAnswerUpdate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormAnswerSaved'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /form-answers:
    post:
      tags:
        - Form answers
      summary: Submit form answer
      operationId: submitFormAnswer
      description: Submit a new form answer for a specific form and a specific entity.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormAnswer'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormAnswerSaved'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /rules:
    get:
      tags:
        - Rules
      summary: List rules
      operationId: listRules
      description: Receive list of rules saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
              - name
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: triggeredBy
          description: Filter list of rules by triggeredBy.
          required: false
          schema:
            type: string
            format: ObjectId
            description: ObjectId or none
        - in: query
          name: segments
          description: Filter list of rules by list of segments.
          required: false
          schema:
            type: array
            items:
              type: string
              format: ObjectId
              description: ObjectId
        - in: query
          name: requestTypes
          description: Filter list of rules by list of request types.
          required: false
          schema:
            type: array
            items:
              type: string
              enum:
                - transaction
                - carKyc
                - carPurchase
                - individualKyc
                - businessKyc
        - in: query
          name: _start
          description: The start number of the rules list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the rules list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Rule'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Rules
      summary: Create rule
      operationId: createRule
      description: Create a new rule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /rules/{id}:
    get:
      tags:
        - Rules
      summary: Get rule
      operationId: getRule
      description: Receive rule by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Rule object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Rules
      summary: Update rule
      operationId: updateRule
      parameters:
        - in: path
          name: id
          description: Rule object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a rule.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    delete:
      tags:
        - Rules
      summary: Delete rule draft
      operationId: deleteRuleDraft
      parameters:
        - in: path
          name: id
          description: Rule object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Delete a rule.
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /signals:
    get:
      tags:
        - Signals
      summary: List signals
      operationId: listSignals
      description: Receive list of signals saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: active
          description: Filter list of signals by active status.
          required: false
          example: true
          schema:
            type: boolean
        - in: query
          name: _start
          description: The start number of the signals list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the signals list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Signal'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Signals
      summary: Create signal
      operationId: createSignal
      description: Create a new signal.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignalBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signal'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /signals/{id}:
    get:
      tags:
        - Signals
      summary: Get signal
      operationId: getSignal
      description: Receive signal by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Signal object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signal'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Signals
      summary: Update signal
      operationId: updateSignal
      parameters:
        - in: path
          name: id
          description: Signal object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a signal.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SignalBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signal'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /signals/activation/{id}:
    put:
      tags:
        - Signals
      summary: Update signal active status
      operationId: updateSignalActiveStatus
      parameters:
        - in: path
          name: id
          description: Signal object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a signal activation status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signal'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction/{id}:
    put:
      tags:
        - Transaction
      summary: Update pending transaction status
      operationId: updateTransactionStatus
      description: Update a transaction status, transaction must be in a pending status.
      parameters:
        - in: path
          name: id
          description: Transaction object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum:
                    - completed
                    - failed
                    - cancelled
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Transaction'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-table-setup/{entityType}:
    get:
      tags:
        - Transaction Table Setup
      summary: Fetch transaction table setup for entity type
      operationId: getTransactionTableSetup
      description: Receive the transaction table interface setup for the specified entity type
      parameters:
        - in: path
          name: entityType
          required: true
          description: Entity type for which to get the table setup
          example: business
          schema:
            $ref: '#/components/schemas/EntityTypes'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTableSetup'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-table-setup/{entityType}/columns:
    post:
      tags:
        - Transaction Table Setup
      summary: Change columns of a transaction table
      operationId: updateTransactionTableSetupColumns
      description: Change the columns to show in a transaction table
      parameters:
        - in: path
          name: entityType
          required: true
          description: Entity type for which to add a new transaction setup row.
          schema:
            $ref: '#/components/schemas/EntityTypes'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                columns:
                  $ref: '#/components/schemas/TransactionTableSetupColumns'
              required:
                - columns
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTableSetup'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-table-setup/{entityType}/row:
    post:
      tags:
        - Transaction Table Setup
      summary: Add a row to a transaction table setup
      operationId: addTransactionTableSetupRow
      description: Add a new row to the transaction table setup. The row displays data for a specific transaction type filter.
      parameters:
        - in: path
          name: entityType
          required: true
          description: Entity type for which to add a new transaction setup row.
          schema:
            $ref: '#/components/schemas/EntityTypes'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                transactionTypeConfiguration:
                  $ref: '#/components/schemas/TransactionTypeConfiguration'
              required:
                - transactionTypeConfiguration
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTableSetup'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-table-setup/{entityType}/rowToShow:
    put:
      tags:
        - Transaction Table Setup
      summary: Define row to show in graph
      operationId: selectTransactionTableSetupRowToShow
      description: Define a row that should show in the transaction graph.
      parameters:
        - in: path
          name: entityType
          required: true
          description: Entity type for which to remove a transaction table setup row.
          schema:
            $ref: '#/components/schemas/EntityTypes'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                rowToShowInGraph:
                  type: string
                  format: objectId
                  example: 62b9437318fe4517089b2833
                  description: Id of the row to show in graph
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTableSetup'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-table-setup/{entityType}/row/{id}:
    put:
      tags:
        - Transaction Table Setup
      summary: Remove a row from a transaction table setup
      operationId: removeTransactionTableSetupRow
      description: Remove a row from the transaction table setup.
      parameters:
        - in: path
          name: entityType
          required: true
          description: Entity type for which to remove a transaction table setup row.
          schema:
            $ref: '#/components/schemas/EntityTypes'
        - in: path
          name: id
          required: true
          description: Id of the row to remove from the transaction table setup
          schema:
            type: string
            format: objectId
            example: 62b9437318fe4517089b2833
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionTableSetup'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-types:
    get:
      tags:
        - Transaction Types
      summary: List transaction types
      operationId: listTransactionTypes
      description: Receive list of transaction types saved in the database.
      parameters:
        - in: query
          name: _sort
          required: false
          example: id
          schema:
            type: string
            enum:
              - id
              - createdAt
        - in: query
          name: _order
          description: Order of list (DESC or ASC) based on the sorting parameter.
          required: false
          example: null
          schema:
            type: string
            enum:
              - DESC
              - ASC
        - in: query
          name: active
          description: Filter list of transaction types by active status.
          required: false
          example: true
          schema:
            type: boolean
        - in: query
          name: _start
          description: The start number of the transaction types list.
          required: false
          example: '0'
          schema:
            type: number
        - in: query
          name: _end
          description: The end number of the transaction types list.
          required: false
          example: '10'
          schema:
            type: number
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionType'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    post:
      tags:
        - Transaction Types
      summary: Create transaction type
      operationId: createTransactionType
      description: Create a new transaction type.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionTypeBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionType'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-types/{id}:
    get:
      tags:
        - Transaction Types
      summary: Get transaction type
      operationId: getTransactionType
      description: Receive transaction type by id saved in the database.
      parameters:
        - in: path
          name: id
          description: Transaction Type object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionType'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
    put:
      tags:
        - Transaction Types
      summary: Update transaction type
      operationId: updateTransactionType
      parameters:
        - in: path
          name: id
          description: Transaction type object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a transaction type.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionTypeBody'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionType'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /transaction-types/activation/{id}:
    put:
      tags:
        - Transaction Types
      summary: Update transaction type active status
      operationId: updateTransactionTypeActiveStatus
      parameters:
        - in: path
          name: id
          description: Transaction Type object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      description: Update a transaction type activation status.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - active
              properties:
                active:
                  type: boolean
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionType'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /individual/population-register/manual-insert:
    post:
      deprecated: true
      tags:
        - Population Register
      summary: Create manual population register - Old
      operationId: createManualPopulationRegisterDeprecated
      description: Create a new manual population register. This version of the endpoint has been deprecated. Use the new version instead. The schema of the new endpoint is very similar which should make it straight forward to migrate.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PopulationRegisterOld'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopulationRegisterOld'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /individuals/population-register/v2/manual-insert/{id}:
    post:
      tags:
        - Population Register
      summary: Create manual population register
      operationId: createManualPopulationRegister
      description: Create a new manual population register.
      parameters:
        - in: path
          name: id
          description: Individual object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PopulationRegister'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopulationRegisterResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
  /individuals/population-register/v2/{id}:
    get:
      tags:
        - Population Register
      summary: Get latest population register
      operationId: getLatestPopulationRegister
      description: Get latest population register.
      parameters:
        - in: path
          name: id
          description: Individual object id
          example: 620a2958bfc1d7a803398a6d
          required: true
          schema:
            type: string
            format: ObjectId
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PopulationRegisterResponse'
        '400':
          description: Invalid parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidBody'
        '500':
          description: Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBody'
      security:
        - bearerAuth: []
components:
  schemas:
    AccountEntityBody:
      type: object
      properties:
        customId:
          type: string
          description: Unique external identifier. Used to append to customIds list.
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        iban:
          type: string
          description: IBAN (International Bank Account Number) of the account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        bankgiroNumber:
          type: string
          description: Bankgiro number associated to the account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        plusgiroNumber:
          type: string
          description: Plusgiro number associated to the account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        bban:
          type: string
          description: BBAN (Basic Bank Account Number) of the account
          externalDocs:
            description: Unique identifier (together with country)
            url: /#section/Introduction/Unique-Identifier
        connectedEntities:
          type: array
          description: List of entities linked to this account (account holders)
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/EntityTypes'
              id:
                type: string
                format: ObjectId
                example: 62b9437318fe4517089b2833
                description: ID of the entity
            required:
              - type
              - id
        provider:
          type: string
          description: Identifier of the institution issuing the account.
        nonBankingInstitution:
          type: boolean
          description: Whether the institution issuing the account is a non banking institution
        source:
          type: string
        opened:
          type: string
          format: date-time
          description: The date the account was opened
        closed:
          type: string
          format: date-time
          description: The date the account was closed
        bankAccountStatus:
          type: string
          description: Status of the account at the bank
          enum:
            - active
            - closed-by-client
            - closed-by-operator
            - closed
            - blocked
        bic:
          type: string
          description: The BIC (Bank identification code) associated to the account
        country:
          type: string
          description: Country where the account is registered
          format: ISO 3166 ALPHA-3
        accountName:
          type: string
          description: The name of the account.
        product:
          type: string
          description: The banks product name for this account
        accountType:
          type: string
          description: Type of bank account
          enum:
            - business
            - checking
            - credit-line
            - external
            - investment
            - mortgage
            - loan
            - other
            - pension
            - savings
            - bank-giro
            - bank-account
            - securities-account
            - prepaid-card
            - company-account
            - investment-savings-account
            - capital-insurance
            - client-account
            - credit-card-account
            - life-insurance
            - loan-account
            - unknown
            - plus-giro-account
            - gaming-account
            - swish-number
            - occupational-pensions-insurance
            - foreign-currency-account
            - share-or-equity-funds-account
            - check
            - money-order
            - e-wallet
            - card
            - transaction-reference
            - generated-transaction-reference
            - iban-number
            - psp-account
            - safe-deposit-box
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
        kycApprovedAt:
          type: string
          format: date-time
          description: Date when KYC has been approved
      required:
        - type
    AccountEntityBodyUpdate:
      allOf:
        - $ref: '#/components/schemas/AccountEntityBody'
        - type: object
          properties:
            status:
              type: string
              description: Status of the business in the Pingwire system. Blocked entities will always receive recommendation "Block" on all their requests.
              enum:
                - Available
                - Blocked
            customIds:
              description: List of all unique customId from different sources. Used to update the whole list.
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
              type: array
              items:
                type: string
    AccountEntity:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the account
              example: 62b9437318fe4517089b2833
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
            customId:
              deprecated: true
              description: Unique external identifier. Deprecated, use customIds instead.
            customIds:
              description: List of all unique customId from different sources.
        - $ref: '#/components/schemas/AccountEntityBodyUpdate'
        - $ref: '#/components/schemas/EntitySavedFields'
    EntitySavedFields:
      type: object
      required:
        - createdAt
        - scoreHistory
      properties:
        createdAt:
          description: Date when the entity was created
          type: string
          format: date-time
        riskScore:
          type: number
          description: The risk score of the entity. It represents a probability of financial crime in percent.
          minimum: 0
          maximum: 100
        scoreLatestCalculationDate:
          description: Date when the score was updated last
          type: string
          format: date-time
        scoreHistory:
          type: array
          description: History of scores
          items:
            type: object
            properties:
              score:
                type: number
                minimum: 0
                maximum: 100
              date:
                description: Date when the score was updated
                format: date-time
                type: string
    Individual:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the individual
              example: 62b9437318fe4517089b2833
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
            customId:
              deprecated: true
              description: Unique external identifier. Deprecated, use customIds instead.
            customIds:
              description: List of all unique customId from different sources.
        - $ref: '#/components/schemas/IndividualBodyUpdate'
        - $ref: '#/components/schemas/EntitySavedFields'
    BusinessBody:
      type: object
      properties:
        customId:
          type: string
          description: Custom ID used to identify the business uniquely. Typically an external unique identifier.
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        name:
          type: string
          description: The name of the business
        swedishOrganizationNumber:
          deprecated: true
          type: string
          format: xxxxxxxxxx
          example: xxxxxxxxxx
          description: The Swedish company registration number. Deprecated, use "registrationNumber" and "residence" instead
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        registrationNumber:
          type: string
          description: Business registration number in the country of residence
          externalDocs:
            description: Unique identifier (in combination with residence)
            url: /#section/Introduction/Unique-Identifier
        residence:
          type: string
          format: ISO 3166 ALPHA-3
          example: SWE
          description: The country of registration of the business. Required if "registrationNumber" is used
        email:
          type: string
          format: email
          description: Contact email of the business
        phoneNumber:
          type: string
          description: Contact phone number of the business
        groups:
          type: array
          description: List of groups the business belongs to.
          items:
            type: string
            format: ObjectId
            example: 620a2958bfc1d7a803398a6d
        kycApprovedAt:
          type: string
          format: date-time
          description: Date when KYC has been approved
    BusinessBodyUpdate:
      allOf:
        - $ref: '#/components/schemas/BusinessBody'
        - type: object
          properties:
            status:
              type: string
              description: Status of the business in the Pingwire system. Blocked entities will always receive recommendation "Block" on all their requests.
              enum:
                - Available
                - Blocked
            customIds:
              description: List of all unique customId from different sources. Used to update the whole list.
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
              type: array
              items:
                type: string
    Business:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: ObjectId
              example: 62b9437318fe4517089b2833
              description: ID of the business
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
            customId:
              deprecated: true
              description: Unique external identifier. Deprecated, use customIds instead.
            customIds:
              description: List of all unique customId from different sources.
        - $ref: '#/components/schemas/BusinessBodyUpdate'
        - $ref: '#/components/schemas/EntitySavedFields'
        - type: object
          properties:
            conductors:
              type: array
              description: List of representatives that have authenticated or facilitated a transaction on behalf of the business.
              items:
                type: object
                properties:
                  id:
                    type: string
                    description: ID of the individual who conducted a transaction
                    format: ObjectId
                    example: 62b9437318fe4517089b2833
                  conductorType:
                    type: string
                    description: Type of conductor
    Car:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the car
              example: 62b9437318fe4517089b2833
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
            customId:
              deprecated: true
              description: Unique external identifier. Deprecated, use customIds instead.
            customIds:
              description: List of all unique customId from different sources.
        - $ref: '#/components/schemas/CarBodyUpdate'
        - $ref: '#/components/schemas/EntitySavedFields'
        - type: object
          properties:
            owner:
              type: object
              description: Entity owning the car
              properties:
                id:
                  type: string
                  format: ObjectId
                  example: 62b9437318fe4517089b2833
                  description: ID of the owner
                  externalDocs:
                    description: Unique identifier
                    url: /#section/Introduction/Unique-Identifier
                type:
                  type: string
                  description: Entity type of the owner
                  enum:
                    - Individual
                    - Business
    Connection:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          description: ID of the connection
          example: 62b9437318fe4517089b2833
        from:
          description: Source entity
          type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the 'from' entity
              example: 62b9437318fe4517089b2833
            type:
              $ref: '#/components/schemas/EntityTypes'
        to:
          description: Target entity
          type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the 'to' entity
              example: 62b9437318fe4517089b2833
            type:
              $ref: '#/components/schemas/EntityTypes'
        type:
          $ref: '#/components/schemas/ConnectionTypes'
        createdAt:
          type: string
          description: Date when the connection was created.
          format: date-time
        connectionInfo:
          type: object
          properties:
            description:
              type: string
              description: Description of the connection
    ConnectionUpdate:
      type: object
      properties:
        from:
          description: Source entity of the connection. Must be used with to and cannot be used with entity1 or entity2
          type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the 'from' entity
              example: 62b9437318fe4517089b2833
            type:
              $ref: '#/components/schemas/EntityTypes'
        to:
          description: Target entity of he connection. Must be used with from and cannot be used with entity1 or entity2
          type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the 'to' entity
              example: 62b9437318fe4517089b2833
            type:
              $ref: '#/components/schemas/EntityTypes'
        entity1:
          description: First entity of the connection (used when source or target doesn't matter). Must be used with enitity2 and cannot be used with from or to
          type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of entity1
              example: 62b9437318fe4517089b2833
            type:
              $ref: '#/components/schemas/EntityTypes'
        entity2:
          description: Second entity of the connection (used when source or target doesn't matter). Must be used with enitity1 and cannot be used with from or to
          type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of entity2
              example: 62b9437318fe4517089b2833
            type:
              $ref: '#/components/schemas/EntityTypes'
        description:
          description: Description of the connection
          type: string
    Comment:
      type: object
      required:
        - _id
        - message
        - date
        - editions
      properties:
        _id:
          type: string
          format: ObjectId
          example: 62b9437318fe4517089b2833
          description: ID of the comment
        member:
          type: string
          format: ObjectId
          example: 62b9437318fe4517089b2833
          description: ID of the member who created the comment
        message:
          type: string
          description: Content of the comment when created the first time
        date:
          type: string
          format: date-time
          description: Date when the comment was created
        editions:
          type: array
          description: Editions of the comment after it was first published
          items:
            type: object
            required:
              - message
              - date
            properties:
              member:
                type: string
                format: ObjectId
                example: 62b9437318fe4517089b2833
                description: ID of the member who edited the comment
              message:
                type: string
                description: Content of the comment after the edition
              date:
                type: string
                format: date-time
                description: Date when the comment was edited
    Ping:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          description: ID of the ping
        entities:
          type: array
          description: Entities included in the ping
          items:
            type: object
            properties:
              id:
                type: string
                format: ObjectId
                description: ID of the entity
              type:
                $ref: '#/components/schemas/EntityTypes'
        description:
          type: string
          description: Ping description to explain what has been discovered by the ping.
        comments:
          type: array
          description: Comments left by members on the ping
          items:
            $ref: '#/components/schemas/Comment'
        rule:
          type: string
          format: ObjectId
          description: ID of the rule that triggered the ping creation.
        expiryDate:
          type: string
          format: date-time
          description: Until the expiryDate the rule will not create any new ping and use the overrideRecommendation
        createdAt:
          description: Date when the ping was created
          type: string
          format: date-time
        score:
          type: number
          description: Score contribution of the ping
          minimum: 0
          maximum: 100
        status:
          type: string
          description: Status of the ping
          enum:
            - pending
            - resolved
            - confirmed
            - ignored
    PingBodyUpdate:
      allOf:
        - type: object
          properties:
            tags:
              type: array
              description: List of tags attached to the ping.
              items:
                type: string
                format: ObjectId
                example: 62b9437318fe4517089b2833
    Case:
      type: object
      required:
        - id
        - entities
        - requests
        - pings
        - fipoReports
        - comments
        - createdAt
        - files
        - status
        - priority
        - tags
      properties:
        id:
          type: string
          format: ObjectId
          description: ID of the case
          example: 62b9437318fe4517089b2833
        entities:
          type: array
          description: Entities included in the case
          items:
            type: object
            required:
              - id
              - type
            properties:
              id:
                type: string
                description: ID of the entity
                format: ObjectId
                example: 62b9437318fe4517089b2833
              type:
                $ref: '#/components/schemas/EntityTypes'
        requests:
          type: array
          description: Requests included in the case
          items:
            type: string
            format: ObjectId
            example: 62b9437318fe4517089b2833
        pings:
          type: array
          description: Pings included in the case
          items:
            type: object
            required:
              - id
            properties:
              id:
                type: string
                description: ID of the ping
                format: ObjectId
                example: 62b9437318fe4517089b2833
              rule:
                type: string
                description: ID of the rule that generated the ping
                format: ObjectId
                example: 62b9437318fe4517089b2833
        fipoReports:
          type: array
          description: Financial police reports included in the case
          items:
            type: string
            format: ObjectId
            example: 62b9437318fe4517089b2833
        comments:
          type: array
          description: Comments in the case
          items:
            $ref: '#/components/schemas/Comment'
        createdAt:
          description: Date when the case was created
          type: string
          format: date-time
        files:
          type: array
          description: File attachments included in the case
          items:
            type: object
            required:
              - key
              - name
              - createdAt
            properties:
              key:
                type: string
                description: Identifier of the file in the file storage system
              name:
                type: string
                description: Name of the file
              createdAt:
                type: string
                description: Date when the file was uploaded to the case
                format: date-time
        mergedInto:
          type: string
          description: ID of the case that this case have been merged into.
          format: ObjectId
          example: 62b9437318fe4517089b2833
        status:
          $ref: '#/components/schemas/CaseStatuses'
        priority:
          $ref: '#/components/schemas/CasePriorities'
        tags:
          type: array
          description: Tags of the case
          items:
            type: string
            format: ObjectId
            example: 62b9437318fe4517089b2833
        closedAt:
          type: string
          format: date-time
          description: Date when the case was closed
        assignment:
          type: object
          description: Assignment details of the case
          properties:
            memberId:
              type: string
              description: ID of the member the case is currently assigned to.
              format: ObjectId
              example: 62b9437318fe4517089b2833
        escalation:
          type: object
          description: Escalation details of the case
          properties:
            escalatedTo:
              type: string
              description: ID of the member the case is currently escalated to.
              format: ObjectId
              example: 62b9437318fe4517089b2833
            requestedBy:
              type: string
              description: ID of the member who requested the escalation.
              format: ObjectId
              example: 62b9437318fe4517089b2833
    InvalidBody:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 400
        message:
          type: string
          description: Main error reason
        errors:
          type: array
          items:
            type: string
            description: Optional list of errors
    ErrorBody:
      type: object
      required:
        - status
        - message
      properties:
        status:
          type: integer
          description: HTTP status code
          example: 500
        message:
          type: string
          description: Main error reason
    RequestTransaction:
      description: A representation of a transaction
      allOf:
        - $ref: '#/components/schemas/RequestTransactionBody'
        - $ref: '#/components/schemas/Request'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              properties:
                transactionId:
                  type: string
                  format: ObjectId
                  externalDocs:
                    description: Unique identifier
                    url: /#section/Introduction/Unique-Identifier
                  description: ID of the transaction
                  example: 62b9437318fe4517089b2833
    RequestCarKyc:
      description: A representation of a carKyc
      allOf:
        - $ref: '#/components/schemas/RequestCarKycBody'
        - $ref: '#/components/schemas/Request'
    RequestIndividualKyc:
      description: A representation of a individualKyc
      allOf:
        - $ref: '#/components/schemas/RequestIndividualKycBody'
        - $ref: '#/components/schemas/Request'
    RequestIndividualKycBody:
      description: A representation of a individualKyc
      allOf:
        - $ref: '#/components/schemas/RequestBody'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              properties:
                bankIdIssueDate:
                  type: string
                  description: Issue date of the BankID certificate use to authenticate the individual during this KYC
                entity:
                  description: Entity that is subject of the KYC
                  oneOf:
                    - allOf:
                        - $ref: '#/components/schemas/IndividualRequestParty'
                        - type: object
                          title: Individual
                          properties:
                            ownedAccounts:
                              description: Accounts owned by the individual
                              type: array
                              items:
                                allOf:
                                  - $ref: '#/components/schemas/AccountRequestParty'
                                  - type: object
                                    title: Account
              required:
                - entity
    RequestBusinessKyc:
      description: A representation of a businessKyc
      allOf:
        - $ref: '#/components/schemas/RequestBusinessKycBody'
        - $ref: '#/components/schemas/Request'
    RequestBusinessKycBody:
      description: A representation of a businessKyc
      allOf:
        - $ref: '#/components/schemas/RequestBody'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              properties:
                entity:
                  description: Entity that is subject of the KYC
                  oneOf:
                    - allOf:
                        - $ref: '#/components/schemas/BusinessRequestParty'
                        - type: object
                          title: Business
                          properties:
                            ownedAccounts:
                              type: array
                              description: Accounts owned by the business
                              items:
                                allOf:
                                  - $ref: '#/components/schemas/AccountRequestParty'
                                  - type: object
                                    title: Account
              required:
                - entity
    RequestCarPurchase:
      description: A representation of a car purchase
      allOf:
        - $ref: '#/components/schemas/RequestCarPurchaseBody'
        - $ref: '#/components/schemas/Request'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              properties:
                transactionId:
                  type: string
                  format: ObjectId
                  externalDocs:
                    description: Unique identifier
                    url: /#section/Introduction/Unique-Identifier
                  description: ID of the transaction
                  example: 62b9437318fe4517089b2833
    RequestTransactionBody:
      description: A representation of a transaction
      allOf:
        - $ref: '#/components/schemas/RequestBody'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              allOf:
                - $ref: '#/components/schemas/TransactionBody'
    RequestCarKycBody:
      description: A representation of a carKyc
      allOf:
        - $ref: '#/components/schemas/RequestBody'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              properties:
                entity:
                  description: Entity that is subject of the KYC
                  oneOf:
                    - $ref: '#/components/schemas/CarRequestParty'
              required:
                - entity
    RequestCarPurchaseBody:
      description: A representation of a car purchase
      allOf:
        - $ref: '#/components/schemas/RequestBody'
        - type: object
          properties:
            extraInformation:
              type: object
              description: Payload of the request. Its schema depends of the requestType
              properties:
                amount:
                  type: number
                  example: 1000
                valuation:
                  type: number
                  example: 1000
                currency:
                  type: string
                  description: ISO 4217 code.
                reference:
                  type: string
                  description: Refers to the regulation (EU) 2015/847 OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL of 20 May 2015 on information accompanying transfers of funds and repealing Regulation (EC) No 1781/2006. If the transaction is not included in the regulation then state another reference which purpose is to trace the transaction, for example a reference for swish or an OCR message.
                textMessage:
                  type: string
                  description: The text that the sender may have written regarding the transaction.
                transactionChannel:
                  type: string
                  enum:
                    - bank-giro
                    - money-transfer
                    - cash
                    - account-transfer
                    - card
                    - courier
                    - unknown
                    - gambling-transaction
                    - swish
                    - other
                    - transfer
                    - securities-transactions
                transactionChannelProvider:
                  type: string
                  description: |
                    Provider of transaction channel for specific cases if the information is known.
                    For `Money transfer` state the name of the organization that provided the money transfer.
                    For `Gambling transactions` state the name of the organization that provided the game.
                    For `Securities transactions` state the name of the organization that provided the transaction.
                date:
                  type: string
                  format: date-time
                  description: Date of the car purchase
                buyer:
                  oneOf:
                    - $ref: '#/components/schemas/IndividualRequestParty'
                    - $ref: '#/components/schemas/BusinessRequestParty'
                  description: At least one field must be included independent of type.
                seller:
                  oneOf:
                    - $ref: '#/components/schemas/IndividualRequestParty'
                    - $ref: '#/components/schemas/BusinessRequestParty'
                  description: At least one field must be included independent of type.
                guarantor:
                  oneOf:
                    - $ref: '#/components/schemas/IndividualRequestParty'
                    - $ref: '#/components/schemas/BusinessRequestParty'
                  description: At least one field must be included independent of type.
                car:
                  oneOf:
                    - $ref: '#/components/schemas/CarRequestParty'
                  description: At least one field must be included of type.
              required:
                - buyer
                - seller
                - car
                - amount
                - date
                - currency
    RequestBody:
      type: object
      required:
        - requestType
        - process
        - extraInformation
      discriminator:
        propertyName: requestType
        mapping:
          transaction: '#/components/schemas/RequestTransactionBody'
          carKyc: '#/components/schemas/RequestCarKycBody'
          carPurchase: '#/components/schemas/RequestCarPurchaseBody'
          individualKyc: '#/components/schemas/RequestIndividualKycBody'
          businessKyc: '#/components/schemas/RequestBusinessKycBody'
      properties:
        customId:
          type: string
          description: Custom id for the request. The customId is considered unique and using the same customId will return the previously created request. This can be used to achieve idempotency.
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        process:
          type: string
          format: ObjectId
          description: ID of the process linked to that request. Processes can be created from the interface or through the API.
        segment:
          type: string
          deprecated: true
          description: Segment has been renamed to process. Use the field process instead.
          format: ObjectId
        requestType:
          description: Type of the request. Each type is associated to a custom extraInformation schema.
          example: transaction
          type: string
    Request:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: ObjectId
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
        - type: object
          required:
            - createdAt
            - processStopped
            - step
            - process
            - requestType
            - extraInformation
          discriminator:
            propertyName: requestType
            mapping:
              transaction: '#/components/schemas/RequestTransaction'
              carKyc: '#/components/schemas/RequestCarKyc'
              carPurchase: '#/components/schemas/RequestCarPurchase'
              individualKyc: '#/components/schemas/RequestIndividualKyc'
              businessKyc: '#/components/schemas/RequestBusinessKyc'
          properties:
            createdAt:
              type: string
              format: date-time
              description: Date when the request was created
            processStopped:
              type: boolean
              example: false
              deprecated: true
              description: For internal use only
            step:
              type: string
              enum:
                - created
                - processed
              example: processed
              description: Indicate the step the request is at. It starts as created and is later updated as processed once the recommendation and signals are available. From the create request endpoint, the response is not returned before the request has reached the processed step. This guarantees that recommendation and signals are always available in the response object.
            recommendation:
              type: string
              enum:
                - proceed
                - review
                - block
              description: Recommendation for the request. This can be used to react to triggered rules and block or put on hold the end user if applicable. The recommendation will always be available for requests at step processed. From the create request endpoint, the response is not returned before the request has reached the processed step. The recommendation is therefore always available from the create request endpoint response object.
            signals:
              type: array
              items:
                type: string
                format: ObjectId
              description: IDs of the signals that have been triggered by the rule tree for this request. Signals can be created through the graphical user interface or through the API. Signals can be used to react to specific rules being triggered in the rule tree. The signals array will always be available for requests at step processed. From the create request endpoint, the response is not returned before the request has reached the processed step. The signals array is therefore always available from the create request endpoint response object.
            comments:
              type: array
              description: Comments left on the request using the graphical user interface.
              items:
                $ref: '#/components/schemas/Comment'
    IndividualRequestParty:
      $ref: '#/components/schemas/Individual-2'
    IndividualBody:
      type: object
      properties:
        customId:
          type: string
          description: Unique external identifier
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        firstName:
          type: string
          description: First name of the individual
        lastName:
          type: string
          description: Last name of the individual
        nationalIdentifier:
          externalDocs:
            description: Unique identifier (country + identifier)
            url: /#section/Introduction/Unique-Identifier
          type: array
          description: National identifiers of the individual
          items:
            $ref: '#/components/schemas/NationalIdentifierRestricted'
        birthDate:
          type: string
          format: date-time
          description: Birth date of the individual
        residence:
          type: string
          format: ISO 3166 ALPHA-3
          description: Country of residence
          example: SWE
        email:
          type: string
          format: email
          description: Contact email of the individual
        phoneNumber:
          type: string
          description: Contact phone number of the individual
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
        kycApprovedAt:
          type: string
          format: date-time
          description: Date when KYC has been approved
    IndividualBodyUpdate:
      allOf:
        - $ref: '#/components/schemas/IndividualBody'
        - type: object
          properties:
            status:
              type: string
              description: Status of the individual in the Pingwire system. Blocked entities will always receive recommendation "Block" on all their requests.
              enum:
                - Available
                - Blocked
            customIds:
              description: List of all unique customId from different sources. Used to update the whole list.
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
              type: array
              items:
                type: string
    AccountRequestParty:
      $ref: '#/components/schemas/Account'
    BusinessRequestParty:
      $ref: '#/components/schemas/Business-2'
    CarRequestParty:
      $ref: '#/components/schemas/Car-2'
    CarBody:
      type: object
      required:
        - registrationNumber
        - registrationCountry
      properties:
        registrationNumber:
          type: string
          description: Registration number of the car
          externalDocs:
            description: Unique identifier (together with registrationCountry)
            url: /#section/Introduction/Unique-Identifier
        registrationCountry:
          type: string
          description: Registration country of the car
          format: ISO 3166 ALPHA-3
        vinCode:
          type: string
          description: VIN (Vehicle Identification Number) of the car
        carModel:
          type: string
          description: Model of the car
        kycApprovedAt:
          type: string
          format: date-time
          description: Date when KYC has been approved
    CarBodyUpdate:
      allOf:
        - $ref: '#/components/schemas/CarBody'
        - type: object
          properties:
            status:
              type: string
              description: Status of the car in the Pingwire system. Blocked entities will always receive recommendation "Block" on all their requests.
              enum:
                - Available
                - Blocked
            groups:
              description: List of groups the entity should be associated to
              type: array
              items:
                type: string
                format: ObjectId
    Process:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createdAt:
          description: Date, iso 8601 format
          type: string
        updatedAt:
          description: Date, iso 8601 format
          type: string
        name:
          type: string
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        active:
          type: boolean
        requestType:
          type: string
          enum:
            - transaction
            - carKyc
            - carPurchase
            - individualKyc
            - businessKy
    ProcessBody:
      type: object
      properties:
        name:
          type: string
          description: Name is unique
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        requestType:
          type: string
          enum:
            - transaction
            - carKyc
            - carPurchase
            - individualKyc
            - businessKy
      required:
        - name
        - requestType
    Group:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createdAt:
          description: Date, iso 8601 format
          type: string
        updatedAt:
          description: Date, iso 8601 format
          type: string
        name:
          type: string
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        active:
          type: boolean
        score:
          type: integer
          description: Between 0 and 100
    GroupBody:
      type: object
      properties:
        name:
          type: string
          description: Name is unique
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        score:
          type: integer
          description: Between 0 and 100
      required:
        - name
        - score
    RiskClass:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createdAt:
          description: Date, iso 8601 format
          type: string
        name:
          type: string
        max:
          type: integer
          description: Between 0 and 100
        min:
          type: integer
          description: Between 0 and 100
    RiskClassBody:
      type: object
      properties:
        name:
          type: string
          description: Name is unique
        min:
          type: integer
          description: Between 0 and 100
        max:
          type: integer
          description: Between 0 and 100
      required:
        - name
        - max
        - min
    Member:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: e-mail
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        permissionRoles:
          type: array
          items:
            type: string
            enum:
              - ReadOnly
              - ReadWrite
              - Manager
        active:
          type: boolean
        birthDate:
          type: string
        occupation:
          type: string
          example: Developer
        swedishSocialSecurityNumber:
          type: string
          format: yyyymmddxxxx
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        residence:
          type: string
          format: ISO 3166 ALPHA-3
        foreignId:
          type: string
          description: Foreign personal identity number
        foreignIdCountry:
          type: string
          format: ISO 3166 ALPHA-3
          description: Foreign personal identity country
    MemberBody:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: e-mail
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        birthDate:
          type: string
        occupation:
          type: string
          example: Developer
        swedishSocialSecurityNumber:
          type: string
          format: yyyymmddxxxx
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        residence:
          type: string
          format: ISO 3166 ALPHA-3
        foreignId:
          type: string
          description: Foreign personal identity number
        foreignIdCountry:
          type: string
          format: ISO 3166 ALPHA-3
          description: Foreign personal identity country
        permissionRoles:
          type: array
          items:
            type: string
            enum:
              - ReadOnly
              - ReadWrite
              - Manager
      required:
        - firstName
        - lastName
        - email
        - permissionRoles
    Rule:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        name:
          type: string
        recommendation:
          type: string
          enum:
            - block
            - review
            - proceed
        ruleType:
          type: string
          enum:
            - request
            - ongoing
        triggeredBy:
          type: string
          format: ObjectId
          description: Rule that trigger the the current rule
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createPing:
          type: boolean
        score:
          type: integer
          description: Between 0 and 100
        requestTypes:
          description: Request types is required when rule type is request
          type: array
          items:
            type: string
            enum:
              - transaction
              - carKyc
              - carPurchase
              - individualKyc
              - businessKyc
        ruleParameters:
          type: object
          format: Mixed
          description: Values depend on the selected rule
        segments:
          type: array
          externalDocs:
            description: Unique identifiers
            url: /#section/Introduction/Unique-Identifier
          items:
            type: string
            format: ObjectId
    RuleBody:
      type: object
      properties:
        name:
          type: string
        recommendation:
          type: string
          enum:
            - block
            - review
            - proceed
        ruleType:
          type: string
          enum:
            - request
            - ongoing
        triggeredBy:
          type: string
          format: ObjectId
          description: Rule that trigger the the current rule
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createPing:
          type: boolean
        score:
          type: integer
          description: Between 0 and 100
        requestTypes:
          description: Request types is required when rule type is request
          type: array
          items:
            type: string
            enum:
              - transaction
              - carKyc
              - carPurchase
              - individualKyc
              - businessKyc
        ruleParameters:
          type: object
          format: Mixed
          description: Values depend on the selected rule
        segments:
          externalDocs:
            description: Unique identifiers
            url: /#section/Introduction/Unique-Identifier
          type: array
          items:
            type: string
            format: ObjectId
      required:
        - name
        - recommendation
        - ruleType
        - createPing
        - score
        - ruleParameters
    Signal:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createdAt:
          description: Date, iso 8601 format
          type: string
        updatedAt:
          description: Date, iso 8601 format
          type: string
        name:
          type: string
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        active:
          type: boolean
    SignalBody:
      type: object
      properties:
        name:
          type: string
          description: Name is unique
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
      required:
        - name
    TransactionType:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        createdAt:
          description: Date, iso 8601 format
          type: string
        updatedAt:
          description: Date, iso 8601 format
          type: string
        name:
          type: string
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        active:
          type: boolean
    TransactionBody:
      type: object
      properties:
        amount:
          type: number
          example: 1000
          description: Amount of the transaction
        currency:
          type: string
          description: Currency of the transaction amount. ISO 4217 code.
        reference:
          type: string
          description: Refers to the regulation (EU) 2015/847 OF THE EUROPEAN PARLIAMENT AND OF THE COUNCIL of 20 May 2015 on information accompanying transfers of funds and repealing Regulation (EC) No 1781/2006. If the transaction is not included in the regulation then state another reference which purpose is to trace the transaction, for example a reference for swish or an OCR message.
        textMessage:
          type: string
          description: The text that the sender may have written regarding the transaction.
        status:
          $ref: '#/components/schemas/transactionStatuses'
        transactionTypes:
          type: array
          description: List of transaction types that should be assigned to this transaction. Transaction types can be created through the interface or the API.
          items:
            type: string
            format: ObjectId
            description: ID of the transaction type
            example: 62b9437318fe4517089b2833
        transactionChannel:
          type: string
          enum:
            - bank-giro
            - money-transfer
            - cash
            - account-transfer
            - card
            - courier
            - unknown
            - gambling-transaction
            - swish
            - other
            - transfer
            - securities-transactions
        transactionChannelProvider:
          type: string
          description: |
            Provider of transaction channel for specific cases if the information is known.
            For `Money transfer` state the name of the organization that provided the money transfer.
            For `Gambling transactions` state the name of the organization that provided the game.
            For `Securities transactions` state the name of the organization that provided the transaction.
        date:
          type: string
          description: Date, iso 8601 format.
        initiator:
          description: The transaction initiator is the entity who starts or triggers a transaction. It can be omitted but one of initiator and recipient is required.
          oneOf:
            - allOf:
                - $ref: '#/components/schemas/AccountRequestParty'
                - $ref: '#/components/schemas/TransactionParty'
                - type: object
                  title: Account
                  properties:
                    payerName:
                      type: string
                      description: Name of the payer as seen from the payment system. This is particularly useful when the initiator is not known (initiator type Account)
                    productEntity:
                      type: object
                      description: Product used to initiate the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
                    conductors:
                      type: array
                      description: List of representatives that authenticated and facilitated the transaction on behalf of the owner of the account.
                      items:
                        allOf:
                          - $ref: '#/components/schemas/IndividualRequestParty'
                          - type: object
                            properties:
                              conductorType:
                                type: string
                                enum:
                                  - signatory
            - allOf:
                - $ref: '#/components/schemas/IndividualRequestParty'
                - $ref: '#/components/schemas/TransactionParty'
                - type: object
                  title: Individual
                  properties:
                    payerName:
                      type: string
                      description: Name of the payer as seen from the payment system. This is particularly useful when the initiator is not known (initiator type Account)
                    productEntity:
                      type: object
                      description: Product used to initiate the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
                    account:
                      title: Account
                      description: Account used to initiate the transaction
                      allOf:
                        - $ref: '#/components/schemas/AccountRequestParty'
            - allOf:
                - $ref: '#/components/schemas/BusinessRequestParty'
                - $ref: '#/components/schemas/TransactionParty'
                - type: object
                  title: Business
                  properties:
                    account:
                      title: Account
                      description: Account used to initiate the transaction
                      allOf:
                        - $ref: '#/components/schemas/AccountRequestParty'
                    payerName:
                      type: string
                      description: Name of the payer as seen from the payment system. This is particularly useful when the initiator is not known (initiator type Account)
                    productEntity:
                      type: object
                      description: Product used to initiate the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
                    conductors:
                      type: array
                      description: List of representatives that authenticated and facilitated the transaction on behalf of the business.
                      items:
                        allOf:
                          - $ref: '#/components/schemas/IndividualRequestParty'
                          - type: object
                            properties:
                              conductorType:
                                type: string
                                enum:
                                  - signatory
        recipient:
          description: The transaction recipient refers to the entity who is the intended final receiver  of a transactions. It can be omitted but one of initiator and recipient is required.
          oneOf:
            - allOf:
                - $ref: '#/components/schemas/AccountRequestParty'
                - $ref: '#/components/schemas/TransactionParty'
                - type: object
                  title: Account
                  properties:
                    beneficiaryName:
                      type: string
                      description: Name of the beneficiary as seen from the payment system. This is particularly useful when the recipient is not known (recipient type Account)
                    productEntity:
                      type: object
                      description: Product used to receive the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
            - allOf:
                - $ref: '#/components/schemas/IndividualRequestParty'
                - $ref: '#/components/schemas/TransactionParty'
                - type: object
                  title: Individual
                  properties:
                    beneficiaryName:
                      type: string
                      description: Name of the beneficiary as seen from the payment system. This is particularly useful when the recipient is not known (recipient type Account)
                    productEntity:
                      type: object
                      description: Product used to receive the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
                    account:
                      title: Account
                      description: Account used to receive the transaction
                      allOf:
                        - $ref: '#/components/schemas/AccountRequestParty'
            - allOf:
                - $ref: '#/components/schemas/BusinessRequestParty'
                - $ref: '#/components/schemas/TransactionParty'
                - type: object
                  title: Business
                  properties:
                    beneficiaryName:
                      type: string
                      description: Name of the beneficiary as seen from the payment system. This is particularly useful when the recipient is not known (recipient type Account)
                    productEntity:
                      type: object
                      description: Product used to receive the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
                    account:
                      title: Account
                      description: Account used to receive the transaction
                      allOf:
                        - $ref: '#/components/schemas/AccountRequestParty'
        processor:
          description: The transaction processor is an intermediary entity or service responsible for handling the transaction between the initiator and the recipient.
          oneOf:
            - allOf:
                - $ref: '#/components/schemas/IndividualRequestParty'
                - type: object
                  title: Individual
                  properties:
                    productEntity:
                      type: object
                      description: Product used to process the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
            - allOf:
                - $ref: '#/components/schemas/BusinessRequestParty'
                - type: object
                  title: Business
                  properties:
                    productEntity:
                      type: object
                      description: Product used to process the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
            - allOf:
                - $ref: '#/components/schemas/AccountRequestParty'
                - type: object
                  title: Account
                  properties:
                    productEntity:
                      type: object
                      description: Product used to process the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
        subProcessor:
          description: The transaction sub-processor is an intermediary entity or service responsible for handling the transaction between the initiator and the recipient. This is useful in case there are more than one intermediary and the processor is therefore not enough.
          oneOf:
            - allOf:
                - $ref: '#/components/schemas/IndividualRequestParty'
                - type: object
                  title: Individual
                  properties:
                    productEntity:
                      type: object
                      description: Product used to sub-process the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
            - allOf:
                - $ref: '#/components/schemas/BusinessRequestParty'
                - type: object
                  title: Business
                  properties:
                    productEntity:
                      type: object
                      description: Product used to sub-process the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
            - allOf:
                - $ref: '#/components/schemas/AccountRequestParty'
                - type: object
                  title: Account
                  properties:
                    productEntity:
                      type: object
                      description: Product used to sub-process the transaction
                      allOf:
                        - $ref: '#/components/schemas/ProductParty'
      required:
        - amount
        - date
        - currency
    Transaction:
      description: A representation of a transaction
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
              description: ID of the transaction
              example: 62b9437318fe4517089b2833
        - $ref: '#/components/schemas/TransactionBody'
    TransactionTableSetup:
      type: object
      required:
        - id
        - entityType
      properties:
        id:
          type: string
          format: objectId
        entityType:
          $ref: '#/components/schemas/EntityTypes'
        rows:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
                format: objectId
                example: 62b9437318fe4517089b2833
                description: Id of the row
              transactionTypeConfiguration:
                $ref: '#/components/schemas/TransactionTypeConfiguration'
        columns:
          $ref: '#/components/schemas/TransactionTableSetupColumns'
        rowToShowInGraph:
          type: string
          format: objectId
          description: The id of the row to show in graph
    TransactionTypeBody:
      type: object
      properties:
        name:
          type: string
          description: Name is unique
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
      required:
        - name
    PopulationRegisterOld:
      type: object
      properties:
        entityId:
          type: string
          format: ObjectId
          description: Unique identifier for the entity.
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        entityType:
          type: string
          enum:
            - Individual
        record:
          type: object
          properties:
            aggregatedIncome:
              type: string
              description: Aggregated income of the person.
            contactAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
                  domesticAddress:
                    type: object
                    properties:
                      city:
                        type: string
                        description: City of the domestic address.
                      coAddress:
                        type: string
                        description: Care of address, if applicable.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      zipCode:
                        type: string
                        description: ZIP code of the domestic address.
            details:
              type: array
              items:
                type: object
                properties:
                  birth:
                    type: object
                    properties:
                      birthCongregation:
                        type: string
                        description: Congregation where the person was born.
                      birthCountyCode:
                        type: string
                        description: County code of the birthplace.
                      birthDate:
                        type: string
                        format: date-time
                        description: Birth date of the person.
                  coordinationNumberInformation:
                    type: object
                    properties:
                      attributionDate:
                        type: string
                        format: date-time
                        description: Date when the coordination number was attributed.
                      deathDate:
                        type: string
                        format: date-time
                        description: Date of death, if applicable.
                      expectedInactivationDate:
                        type: string
                        format: date-time
                        description: Expected date for inactivation of the coordination number.
                      inactivationDate:
                        type: string
                        format: date-time
                        description: Actual inactivation date of the coordination number.
                      inactivationReason:
                        type: string
                        description: Reason for inactivation.
                      renewalDate:
                        type: string
                        format: date-time
                        description: Date for next renewal of the coordination number.
                      status:
                        type: string
                        description: Current status of the coordination number.
                  gender:
                    type: string
                    description: Gender of the person.
                  personIdChangeInformation:
                    type: array
                    items:
                      type: object
                      properties:
                        referencePersonId:
                          type: string
                          description: Reference to the previous or new person ID.
                        referenceType:
                          type: string
                          description: Type of reference for the person ID change.
                  protectedRegistration:
                    type: boolean
                    description: Indicates if the registration is protected.
                  secrecy:
                    type: object
                    properties:
                      secrecy:
                        type: boolean
                        description: Indicates if secrecy is applied.
                      secrecySetBySpar:
                        type: boolean
                        description: Indicates if secrecy was set by SPAR.
                  swedishCitizen:
                    type: boolean
                    description: Indicates if the person is a Swedish citizen.
            foreignAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
            incomeYear:
              type: string
              description: The year of the reported income.
            name:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the name validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the name validity.
                  firstName:
                    type: string
                    description: First name of the person.
                  givenNameCode:
                    type: number
                    description: Code representing the given name.
                  middleName:
                    type: string
                    description: Middle name of the person.
                  shortenedName:
                    type: string
                    description: Shortened or commonly used name.
                  surName:
                    type: string
                    description: Surname of the person.
            nationalRegistryChangeDate:
              type: string
              format: date-time
              description: Date of the last change in the national registry.
            personId:
              type: string
            personIdCountry:
              type: string
              format: ISO 3166 ALPHA-3
              description: Unique identifier of the person.
            personIdType:
              type: string
              description: Type of the person ID.
            populationRegistration:
              type: array
              items:
                type: object
                properties:
                  countyCode:
                    type: string
                    description: County code of the registration.
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the population registration.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the population registration.
                  districtCode:
                    type: string
                    description: District code of the population registration.
                  municipalityCode:
                    type: string
                    description: Municipality code of the population registration.
                  populationRegistrationDate:
                    type: string
                    format: date-time
                    description: Date of the population registration.
                  residenceStatusCode:
                    type: string
                    description: Status code of the residence.
            protectedRegistration:
              type: boolean
              description: Indicates if the registration is protected.
            protectedRegistrationDate:
              type: string
              format: date-time
              description: Date when the registration was protected.
            realEstate:
              type: array
              items:
                type: object
                properties:
                  countyCode:
                    type: string
                    description: County code of the real estate.
                  municipalityCode:
                    type: string
                    description: Municipality code of the real estate.
                  realEstatePart:
                    type: array
                    items:
                      type: object
                      properties:
                        identification:
                          type: string
                          description: Identification number of the real estate part.
                        name:
                          type: string
                          description: Name of the real estate part.
                        shareDenominator:
                          type: number
                          description: Denominator for the share of the real estate part.
                        shareNumerator:
                          type: number
                          description: Numerator for the share of the real estate part.
                  realEstateTypeCode:
                    type: string
                    description: Type code of the real estate.
                  taxationUnitIdentificationNumber:
                    type: string
                    description: Taxation unit identification number of the real estate.
                  taxationValue:
                    type: string
                    description: Taxation value of the real estate.
                  taxationYear:
                    type: string
                    description: Taxation year of the real estate.
            relation:
              type: array
              items:
                type: object
                properties:
                  birthDate:
                    type: string
                    format: date-time
                    description: Birth date of the related person.
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the relation.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the relation.
                  deRegistrationDate:
                    type: string
                    format: date-time
                    description: Date of deregistration, if applicable.
                  deRegistrationReasonCode:
                    type: string
                    description: Reason code for deregistration.
                  deathDate:
                    type: string
                    format: date-time
                    description: Death date of the related person, if applicable.
                  firstName:
                    type: string
                    description: First name of the related person.
                  middleName:
                    type: string
                    description: Middle name of the related person.
                  personId:
                    type: string
                    description: Unique identifier of the related person.
                  relationType:
                    type: string
                    description: Type of relation.
                  surName:
                    type: string
                    description: Surname of the related person.
            secrecy:
              type: object
              properties:
                secrecy:
                  type: boolean
                  description: Indicates if secrecy is applied.
                secrecySetBySpar:
                  type: boolean
                  description: Indicates if secrecy was set by SPAR.
            secrecyDate:
              type: string
              format: date-time
              description: Date when secrecy was applied.
            specialPostalAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
                  domesticAddress:
                    type: object
                    properties:
                      city:
                        type: string
                        description: City of the domestic addresse
                      coAddress:
                        type: string
                        description: Care of address, if applicable.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      zipCode:
                        type: string
                        description: ZIP code of the domestic address.
      required:
        - entityId
        - entityType
        - record
    PopulationRegister:
      type: object
      properties:
        fetchedAt:
          type: string
          format: date-time
          description: Date when the information was collected from the data provider. If unknown use the current timestamp.
        data:
          type: object
          description: Population register data
          properties:
            aggregatedIncome:
              type: string
              description: Aggregated income of the person.
            contactAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
                  domesticAddress:
                    type: object
                    properties:
                      city:
                        type: string
                        description: City of the domestic address.
                      coAddress:
                        type: string
                        description: Care of address, if applicable.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      zipCode:
                        type: string
                        description: ZIP code of the domestic address.
            details:
              type: array
              items:
                type: object
                properties:
                  birth:
                    type: object
                    properties:
                      birthCongregation:
                        type: string
                        description: Congregation where the person was born.
                      birthCountyCode:
                        type: string
                        description: County code of the birthplace.
                      birthDate:
                        type: string
                        format: date-time
                        description: Birth date of the person.
                  coordinationNumberInformation:
                    type: object
                    properties:
                      attributionDate:
                        type: string
                        format: date-time
                        description: Date when the coordination number was attributed.
                      deathDate:
                        type: string
                        format: date-time
                        description: Date of death, if applicable.
                      expectedInactivationDate:
                        type: string
                        format: date-time
                        description: Expected date for inactivation of the coordination number.
                      inactivationDate:
                        type: string
                        format: date-time
                        description: Actual inactivation date of the coordination number.
                      inactivationReason:
                        type: string
                        description: Reason for inactivation.
                      renewalDate:
                        type: string
                        format: date-time
                        description: Date for next renewal of the coordination number.
                      status:
                        type: string
                        description: Current status of the coordination number.
                  gender:
                    type: string
                    description: Gender of the person.
                  personIdChangeInformation:
                    type: array
                    items:
                      type: object
                      properties:
                        referencePersonId:
                          type: string
                          description: Reference to the previous or new person ID.
                        referenceType:
                          type: string
                          description: Type of reference for the person ID change.
                  protectedRegistration:
                    type: boolean
                    description: Indicates if the registration is protected.
                  secrecy:
                    type: object
                    properties:
                      secrecy:
                        type: boolean
                        description: Indicates if secrecy is applied.
                      secrecySetBySpar:
                        type: boolean
                        description: Indicates if secrecy was set by SPAR.
                  swedishCitizen:
                    type: boolean
                    description: Indicates if the person is a Swedish citizen.
            foreignAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
            incomeYear:
              type: string
              description: The year of the reported income.
            name:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the name validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the name validity.
                  firstName:
                    type: string
                    description: First name of the person.
                  givenNameCode:
                    type: number
                    description: Code representing the given name.
                  middleName:
                    type: string
                    description: Middle name of the person.
                  shortenedName:
                    type: string
                    description: Shortened or commonly used name.
                  surName:
                    type: string
                    description: Surname of the person.
            nationalRegistryChangeDate:
              type: string
              format: date-time
              description: Date of the last change in the national registry.
            personId:
              type: string
            personIdCountry:
              type: string
              format: ISO 3166 ALPHA-3
              description: Unique identifier of the person.
            personIdType:
              type: string
              description: Type of the person ID.
            populationRegistration:
              type: array
              items:
                type: object
                properties:
                  countyCode:
                    type: string
                    description: County code of the registration.
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the population registration.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the population registration.
                  districtCode:
                    type: string
                    description: District code of the population registration.
                  municipalityCode:
                    type: string
                    description: Municipality code of the population registration.
                  populationRegistrationDate:
                    type: string
                    format: date-time
                    description: Date of the population registration.
                  residenceStatusCode:
                    type: string
                    description: Status code of the residence.
            protectedRegistration:
              type: boolean
              description: Indicates if the registration is protected.
            protectedRegistrationDate:
              type: string
              format: date-time
              description: Date when the registration was protected.
            realEstate:
              type: array
              items:
                type: object
                properties:
                  countyCode:
                    type: string
                    description: County code of the real estate.
                  municipalityCode:
                    type: string
                    description: Municipality code of the real estate.
                  realEstatePart:
                    type: array
                    items:
                      type: object
                      properties:
                        identification:
                          type: string
                          description: Identification number of the real estate part.
                        name:
                          type: string
                          description: Name of the real estate part.
                        shareDenominator:
                          type: number
                          description: Denominator for the share of the real estate part.
                        shareNumerator:
                          type: number
                          description: Numerator for the share of the real estate part.
                  realEstateTypeCode:
                    type: string
                    description: Type code of the real estate.
                  taxationUnitIdentificationNumber:
                    type: string
                    description: Taxation unit identification number of the real estate.
                  taxationValue:
                    type: string
                    description: Taxation value of the real estate.
                  taxationYear:
                    type: string
                    description: Taxation year of the real estate.
            relation:
              type: array
              items:
                type: object
                properties:
                  birthDate:
                    type: string
                    format: date-time
                    description: Birth date of the related person.
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the relation.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the relation.
                  deRegistrationDate:
                    type: string
                    format: date-time
                    description: Date of deregistration, if applicable.
                  deRegistrationReasonCode:
                    type: string
                    description: Reason code for deregistration.
                  deathDate:
                    type: string
                    format: date-time
                    description: Death date of the related person, if applicable.
                  firstName:
                    type: string
                    description: First name of the related person.
                  middleName:
                    type: string
                    description: Middle name of the related person.
                  personId:
                    type: string
                    description: Unique identifier of the related person.
                  relationType:
                    type: string
                    description: Type of relation.
                  surName:
                    type: string
                    description: Surname of the related person.
            secrecy:
              type: object
              properties:
                secrecy:
                  type: boolean
                  description: Indicates if secrecy is applied.
                secrecySetBySpar:
                  type: boolean
                  description: Indicates if secrecy was set by SPAR.
            secrecyDate:
              type: string
              format: date-time
              description: Date when secrecy was applied.
            specialPostalAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
                  domesticAddress:
                    type: object
                    properties:
                      city:
                        type: string
                        description: City of the domestic addresse
                      coAddress:
                        type: string
                        description: Care of address, if applicable.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      zipCode:
                        type: string
                        description: ZIP code of the domestic address.
      required:
        - fetchedAt
        - data
    PopulationRegisterResponse:
      type: object
      properties:
        id:
          type: string
          format: ObjectId
          description: Id of the new population register object
        fetchedAt:
          type: string
          format: date-time
          description: Date and time when the information was collected from the data provider.
        createdAt:
          type: string
          format: date-time
          description: Date and time when the information was inserted in the system.
        entityId:
          type: string
          format: ObjectId
          description: Id of the entity linked to the population register object
        entityType:
          type: string
          enum:
            - Individual
          description: Type of the entity linked to the population register object
        providerName:
          type: string
          description: Name of the provider used to fetch the population register object
        data:
          type: object
          description: Population register data
          properties:
            aggregatedIncome:
              type: string
              description: Aggregated income of the person.
            contactAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
                  domesticAddress:
                    type: object
                    properties:
                      city:
                        type: string
                        description: City of the domestic address.
                      coAddress:
                        type: string
                        description: Care of address, if applicable.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      zipCode:
                        type: string
                        description: ZIP code of the domestic address.
            details:
              type: array
              items:
                type: object
                properties:
                  birth:
                    type: object
                    properties:
                      birthCongregation:
                        type: string
                        description: Congregation where the person was born.
                      birthCountyCode:
                        type: string
                        description: County code of the birthplace.
                      birthDate:
                        type: string
                        format: date-time
                        description: Birth date of the person.
                  coordinationNumberInformation:
                    type: object
                    properties:
                      attributionDate:
                        type: string
                        format: date-time
                        description: Date when the coordination number was attributed.
                      deathDate:
                        type: string
                        format: date-time
                        description: Date of death, if applicable.
                      expectedInactivationDate:
                        type: string
                        format: date-time
                        description: Expected date for inactivation of the coordination number.
                      inactivationDate:
                        type: string
                        format: date-time
                        description: Actual inactivation date of the coordination number.
                      inactivationReason:
                        type: string
                        description: Reason for inactivation.
                      renewalDate:
                        type: string
                        format: date-time
                        description: Date for next renewal of the coordination number.
                      status:
                        type: string
                        description: Current status of the coordination number.
                  gender:
                    type: string
                    description: Gender of the person.
                  personIdChangeInformation:
                    type: array
                    items:
                      type: object
                      properties:
                        referencePersonId:
                          type: string
                          description: Reference to the previous or new person ID.
                        referenceType:
                          type: string
                          description: Type of reference for the person ID change.
                  protectedRegistration:
                    type: boolean
                    description: Indicates if the registration is protected.
                  secrecy:
                    type: object
                    properties:
                      secrecy:
                        type: boolean
                        description: Indicates if secrecy is applied.
                      secrecySetBySpar:
                        type: boolean
                        description: Indicates if secrecy was set by SPAR.
                  swedishCitizen:
                    type: boolean
                    description: Indicates if the person is a Swedish citizen.
            foreignAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
            incomeYear:
              type: string
              description: The year of the reported income.
            name:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the name validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the name validity.
                  firstName:
                    type: string
                    description: First name of the person.
                  givenNameCode:
                    type: number
                    description: Code representing the given name.
                  middleName:
                    type: string
                    description: Middle name of the person.
                  shortenedName:
                    type: string
                    description: Shortened or commonly used name.
                  surName:
                    type: string
                    description: Surname of the person.
            nationalRegistryChangeDate:
              type: string
              format: date-time
              description: Date of the last change in the national registry.
            personId:
              type: string
            personIdCountry:
              type: string
              format: ISO 3166 ALPHA-3
              description: Unique identifier of the person.
            personIdType:
              type: string
              description: Type of the person ID.
            populationRegistration:
              type: array
              items:
                type: object
                properties:
                  countyCode:
                    type: string
                    description: County code of the registration.
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the population registration.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the population registration.
                  districtCode:
                    type: string
                    description: District code of the population registration.
                  municipalityCode:
                    type: string
                    description: Municipality code of the population registration.
                  populationRegistrationDate:
                    type: string
                    format: date-time
                    description: Date of the population registration.
                  residenceStatusCode:
                    type: string
                    description: Status code of the residence.
            protectedRegistration:
              type: boolean
              description: Indicates if the registration is protected.
            protectedRegistrationDate:
              type: string
              format: date-time
              description: Date when the registration was protected.
            realEstate:
              type: array
              items:
                type: object
                properties:
                  countyCode:
                    type: string
                    description: County code of the real estate.
                  municipalityCode:
                    type: string
                    description: Municipality code of the real estate.
                  realEstatePart:
                    type: array
                    items:
                      type: object
                      properties:
                        identification:
                          type: string
                          description: Identification number of the real estate part.
                        name:
                          type: string
                          description: Name of the real estate part.
                        shareDenominator:
                          type: number
                          description: Denominator for the share of the real estate part.
                        shareNumerator:
                          type: number
                          description: Numerator for the share of the real estate part.
                  realEstateTypeCode:
                    type: string
                    description: Type code of the real estate.
                  taxationUnitIdentificationNumber:
                    type: string
                    description: Taxation unit identification number of the real estate.
                  taxationValue:
                    type: string
                    description: Taxation value of the real estate.
                  taxationYear:
                    type: string
                    description: Taxation year of the real estate.
            relation:
              type: array
              items:
                type: object
                properties:
                  birthDate:
                    type: string
                    format: date-time
                    description: Birth date of the related person.
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the relation.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the relation.
                  deRegistrationDate:
                    type: string
                    format: date-time
                    description: Date of deregistration, if applicable.
                  deRegistrationReasonCode:
                    type: string
                    description: Reason code for deregistration.
                  deathDate:
                    type: string
                    format: date-time
                    description: Death date of the related person, if applicable.
                  firstName:
                    type: string
                    description: First name of the related person.
                  middleName:
                    type: string
                    description: Middle name of the related person.
                  personId:
                    type: string
                    description: Unique identifier of the related person.
                  relationType:
                    type: string
                    description: Type of relation.
                  surName:
                    type: string
                    description: Surname of the related person.
            secrecy:
              type: object
              properties:
                secrecy:
                  type: boolean
                  description: Indicates if secrecy is applied.
                secrecySetBySpar:
                  type: boolean
                  description: Indicates if secrecy was set by SPAR.
            secrecyDate:
              type: string
              format: date-time
              description: Date when secrecy was applied.
            specialPostalAddress:
              type: array
              items:
                type: object
                properties:
                  dateFrom:
                    type: string
                    format: date-time
                    description: Start date of the address validity.
                  dateTo:
                    type: string
                    format: date-time
                    description: End date of the address validity.
                  internationalAddress:
                    type: object
                    properties:
                      country:
                        type: string
                        description: Country of the international address.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      deliveryAddress3:
                        type: string
                        description: Third line of the delivery address.
                  domesticAddress:
                    type: object
                    properties:
                      city:
                        type: string
                        description: City of the domestic addresse
                      coAddress:
                        type: string
                        description: Care of address, if applicable.
                      deliveryAddress1:
                        type: string
                        description: First line of the delivery address.
                      deliveryAddress2:
                        type: string
                        description: Second line of the delivery address.
                      zipCode:
                        type: string
                        description: ZIP code of the domestic address.
      required:
        - fetchedAt
        - createdAt
        - entityId
        - entityType
        - providerName
        - data
    Product:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ProductSwish'
        - $ref: '#/components/schemas/ProductLineOfBusiness'
      discriminator:
        propertyName: productType
        mapping:
          swish: '#/components/schemas/ProductSwish'
          lineOfBusiness: '#/components/schemas/ProductLineOfBusiness'
    ProductBase:
      allOf:
        - type: object
          required:
            - id
          properties:
            id:
              type: string
              format: ObjectId
              description: ID of the individual
              example: 62b9437318fe4517089b2833
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
            customIds:
              description: List of all unique customIds from different sources.
        - $ref: '#/components/schemas/ProductBodyUpdateBase'
        - $ref: '#/components/schemas/EntitySavedFields'
    ProductBody:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ProductSwishBody'
        - $ref: '#/components/schemas/ProductLineOfBusinessBody'
      discriminator:
        propertyName: productType
        mapping:
          swish: '#/components/schemas/ProductSwishBody'
          lineOfBusiness: '#/components/schemas/ProductLineOfBusinessBody'
    ProductBodyBase:
      type: object
      properties:
        customId:
          type: string
          description: Unique external identifier
          writeOnly: true
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        productNumber:
          type: string
          description: Unique identification number of the product
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        productDescription:
          type: string
          description: Description of the product
        productType:
          $ref: '#/components/schemas/ProductTypes'
        parties:
          type: array
          items:
            type: object
            properties:
              type:
                $ref: '#/components/schemas/EntityTypes'
              id:
                type: string
                format: ObjectId
                example: 62b9437318fe4517089b2833
                description: ID of the entity
              role:
                $ref: '#/components/schemas/ProductPartyRoles'
            required:
              - type
              - id
              - role
          description: List of entities (parties) linked to this product
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
        kycApprovedAt:
          type: string
          format: date-time
          description: Date when KYC has been approved
    ProductBodyUpdate:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ProductSwishBodyUpdate'
        - $ref: '#/components/schemas/ProductLineOfBusinessBodyUpdate'
      discriminator:
        propertyName: productType
        mapping:
          swish: '#/components/schemas/ProductSwishBodyUpdate'
          lineOfBusiness: '#/components/schemas/ProductLineOfBusinessBodyUpdate'
    ProductBodyUpdateBase:
      allOf:
        - $ref: '#/components/schemas/ProductBodyBase'
        - type: object
          properties:
            customIds:
              description: List of all unique customIds from different sources. Used to update the whole list.
              externalDocs:
                description: Unique identifier
                url: /#section/Introduction/Unique-Identifier
              type: array
              items:
                type: string
    ProductParty:
      $ref: '#/components/schemas/Product-2'
    ProductPartySwish:
      allOf:
        - $ref: '#/components/schemas/ProductPartyBase'
        - $ref: '#/components/schemas/ProductSwishProductInformation'
    ProductPartyLineOfBusiness:
      allOf:
        - $ref: '#/components/schemas/ProductPartyBase'
        - $ref: '#/components/schemas/ProductLineOfBusinessProductInformation'
    ProductPartyBase:
      type: object
      required:
        - type
      properties:
        type:
          type: string
          enum:
            - Product
        id:
          type: string
          format: ObjectId
          description: ID of an already created product
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        customId:
          type: string
          description: Unique external identifier
          writeOnly: true
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        productNumber:
          type: string
          description: Number of the product
        productType:
          $ref: '#/components/schemas/ProductTypes'
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
    ProductSwish:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - $ref: '#/components/schemas/ProductSwishProductInformation'
    ProductSwishBody:
      allOf:
        - $ref: '#/components/schemas/ProductBodyBase'
        - $ref: '#/components/schemas/ProductSwishProductInformation'
    ProductSwishBodyUpdate:
      allOf:
        - $ref: '#/components/schemas/ProductBodyUpdateBase'
        - $ref: '#/components/schemas/ProductSwishProductInformation'
    ProductSwishProductInformation:
      type: object
      properties:
        productInformation:
          type: object
          description: Information about the product
          properties:
            phoneNumber:
              type: string
              description: Phone number associated to the swish product
              example: '0701234567'
    ProductLineOfBusiness:
      allOf:
        - $ref: '#/components/schemas/ProductBase'
        - $ref: '#/components/schemas/ProductLineOfBusinessProductInformation'
    ProductLineOfBusinessBody:
      allOf:
        - $ref: '#/components/schemas/ProductBodyBase'
        - $ref: '#/components/schemas/ProductLineOfBusinessProductInformation'
    ProductLineOfBusinessBodyUpdate:
      allOf:
        - $ref: '#/components/schemas/ProductBodyUpdateBase'
        - $ref: '#/components/schemas/ProductLineOfBusinessProductInformation'
    ProductLineOfBusinessProductInformation:
      type: object
      properties:
        productInformation:
          type: object
          description: Information about the product
          properties:
            adress:
              type: object
              description: Address associated to the lineOfBusiness product
              properties:
                streetAdress:
                  type: string
                  description: Street part of the address. Typically street name and house number
                postalCode:
                  type: string
                  description: Postal code
                city:
                  type: string
                  description: City
                country:
                  type: string
                  format: ISO 3166 ALPHA-3
                  description: Country
                  example: SWE
            email:
              type: string
              format: email
              description: Contact email associated to the lineOfBusiness product
              example: test@test.com
            phone:
              type: string
              description: Phone number associated to the lineOfBusiness product
              example: '0701234567'
    CompanyInformationRequest:
      type: object
      properties:
        fetchedAt:
          type: string
          format: date-time
          description: Date and time when the information was collected from the data provider. If unknown use the current timestamp.
        data:
          type: object
          description: Company information data
          properties:
            registration:
              type: object
              description: Company registration data
              properties:
                registrationCountry:
                  type: string
                  example: SWE
                  format: ISO 3166 ALPHA-3
                  description: Country of registration
                registrationNumber:
                  type: string
                  description: Registration number in the format of the country of registration
                name:
                  type: string
                  description: Registered name of the company
                registrationDate:
                  type: string
                  format: date-time
                  description: Date the company was registered
                deregistrationDate:
                  type: string
                  format: date-time
                  description: Date the company was de-registered. This is only relevant for companies that are not active anymore.
                registrationCommuneCode:
                  type: string
                  description: Code of the commune of registration of the company
                registrationCommune:
                  type: string
                  description: Commune of registration of the company
                registrationCountyCode:
                  type: string
                  description: Code of the county of registration of the company
                registrationCounty:
                  type: string
                  description: County of registration of the company
                legalForm:
                  type: string
                  enum:
                    - limited-liability-company
                    - economic-association
                    - sole-trader
                    - limited-partnership
                    - trading-partnership
                    - other
                  description: Legal form of the company. This field is required if legalFormDescription is provided.
                legalFormDescription:
                  type: string
                  description: Can be used to describe in more details the legal form of the company. This is a complement to legalForm in case the available values are not able to describe precisely the legal form.
                status:
                  type: string
                  enum:
                    - active
                    - shelf-company
                    - liquidation
                    - fusion
                    - restructuring
                    - bankruptcy
                    - other
                  description: Status of the company. This field is required if statusDescription is provided.
                statusDescription:
                  type: string
                  description: Can be used to describe in more details the status of the company. This is a complement to status in case the available values are not able to describe precisely the status of the company.
                statusDate:
                  type: string
                  format: date-time
                  description: Date when the status of the company changed
                activityDescription:
                  type: string
                  description: Description of the business activity of the company
                naceCode:
                  type: string
                  description: NACE code of the company industry. The NACE code can either be a section (e.g. A), a division (e.g. A1), a group (e.g. A1.1) or a class (e.g. A1.1.1)
                  example: A1.1.1
                naceDescription:
                  type: string
                  description: Description of the company industry according to its NACE code.
                isRegisteredVat:
                  type: boolean
                  description: True if the company is registered for VAT
                vatNumber:
                  type: string
                  description: VAT number of the company
                vatRegistrationDate:
                  type: string
                  format: date-time
                  description: Date of registration for VAT
                isRegisteredPreliminaryTax:
                  type: boolean
                  description: True if the company is registered for preliminary tax (F-skatt in Sweden)
                preliminaryTaxRegistrationDate:
                  type: string
                  description: Date of registration for preliminary tax
            contact:
              type: object
              properties:
                email:
                  type: string
                  description: Contact email of the company
                phone:
                  type: string
                  description: Contact phone number of the company
                fax:
                  type: string
                  description: Contact fax number of the company
                website:
                  type: string
                  description: Public website of the company
            addresses:
              type: object
              properties:
                registrationAddress:
                  type: object
                  description: Official address of the company as it stands in the national register
                  properties:
                    streetAddress:
                      type: string
                      description: Street part of the address. Typically street name and house number
                    co:
                      type: string
                      description: Care of address
                    postalCode:
                      type: string
                      description: Postal code
                    city:
                      type: string
                      description: City
                    state:
                      type: string
                      description: State
                    country:
                      type: string
                      example: SWE
                      format: ISO 3166 ALPHA-3
                      description: country
                  required:
                    - streetAddress
                    - city
                    - country
                visitingAddresses:
                  type: array
                  items:
                    type: object
                    description: Visiting address of the company
                    properties:
                      streetAddress:
                        type: string
                        description: Street part of the address. Typically street name and house number
                      co:
                        type: string
                        description: Care of address
                      postalCode:
                        type: string
                        description: Postal code
                      city:
                        type: string
                        description: City
                      state:
                        type: string
                        description: State
                      country:
                        type: string
                        example: SWE
                        format: ISO 3166 ALPHA-3
                        description: country
                    required:
                      - streetAddress
                      - city
                      - country
                mailingAddresses:
                  type: array
                  description: Post address of the company
                  items:
                    type: object
                    properties:
                      streetAddress:
                        type: string
                        description: Street part of the address. Typically street name and house number
                      co:
                        type: string
                        description: Care of address
                      postalCode:
                        type: string
                        description: Postal code
                      city:
                        type: string
                        description: City
                      state:
                        type: string
                        description: State
                      country:
                        type: string
                        example: SWE
                        format: ISO 3166 ALPHA-3
                        description: country
                    required:
                      - streetAddress
                      - city
                      - country
          required:
            - registration
            - contact
            - addresses
      required:
        - fetchedAt
        - data
    CompanyInformationResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: Id of the new company information object
            fetchedAt:
              type: string
              format: date-time
              description: Date and time when the information was collected from the data provider.
            createdAt:
              type: string
              format: date-time
              description: Date and time when the information was inserted in the system.
            entityId:
              type: string
              format: ObjectId
              description: Id of the entity linked to the company information object
            entityType:
              type: string
              enum:
                - Business
              description: Type of the entity linked to the company information object
            providerName:
              type: string
              description: Name of the provider used to fetch the company information object
          required:
            - fetchedAt
            - createdAt
            - entityId
            - entityType
            - providerName
            - data
        - $ref: '#/components/schemas/CompanyInformationRequest'
    BeneficialOwnersRequest:
      type: object
      properties:
        fetchedAt:
          type: string
          format: date-time
          description: Date and time when the information was collected from the data provider. If unknown use the current timestamp.
        data:
          type: object
          description: Beneficial owners data
          properties:
            beneficialOwners:
              type: array
              description: List of beneficial owners of the business
              items:
                type: object
                properties:
                  person:
                    type: object
                    description: Information about the person who is the beneficial owner. At least one of the unique identifier fields is required
                    properties:
                      entityId:
                        type: string
                        format: ObjectId
                        description: Id of the entity that is the beneficial owner. Use this to link it to a previously created entity.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      entityType:
                        type: string
                        enum:
                          - Individual
                        description: Type of the entity. This is only used when entityId is provided.
                      customId:
                        type: string
                        description: Custom Id of the entity who is the beneficial owner. This can be used to link it to a previously created entity.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      nationalIdentifier:
                        type: array
                        description: National identifier of the beneficial owner. This can be used to link it to a previously created entity.
                        items:
                          $ref: '#/components/schemas/NationalIdentifierRestricted'
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      firstName:
                        type: string
                        description: First name of the beneficial owner. Can be used to link it to a previously created entity together with the last name and birth date.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      lastName:
                        type: string
                        description: Last name of the beneficial owner. Can be used to link it to a previously created entity together with the first name and birth date.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      birthDate:
                        type: string
                        format: date-time
                        description: Birth date of the beneficial owner. Can be used to link it to a previously created entity together with the first name and last name.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      groups:
                        type: array
                        description: List of groups the beneficial owner should be added to.
                        items:
                          type: string
                          format: ObjectId
                          example: 620a2958bfc1d7a803398a6d
                      citizenship:
                        type: array
                        description: List of the countries of citizenship of the beneficial owner
                        items:
                          type: string
                          example: SWE
                          format: ISO 3166 ALPHA-3
                      countryResidence:
                        type: string
                        example: SWE
                        format: ISO 3166 ALPHA-3
                        description: Country of residence of the beneficial owner
                  extentOfOwnership:
                    type: object
                    description: Describe how big share of the business this beneficial owner owns
                    properties:
                      lowerBound:
                        type: number
                        description: Lower bound of the known interval for the share percentage. If the share percentage is perfectly known this can be equal to upperBound
                      upperBound:
                        type: number
                        description: Upper bound of the known interval for the share percentage. If the share percentage is perfectly known this can be equal to lowerBound
                    required:
                      - lowerBound
                      - upperBound
                  extentOfVoteRights:
                    type: object
                    description: Describe how big share of the voting rights of the business this beneficial owner has
                    properties:
                      lowerBound:
                        type: number
                        description: Lower bound of the known interval for the share percentage. If the share percentage is perfectly known this can be equal to upperBound
                      upperBound:
                        type: number
                        description: Upper bound of the known interval for the share percentage. If the share percentage is perfectly known this can be equal to lowerBound
                    required:
                      - lowerBound
                      - upperBound
                  typesOfControl:
                    type: array
                    description: List of the different ways the beneficial owner has control over the business
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of control over the business.
                          enum:
                            - direct-control
                            - board-member
                            - indirect-control
                            - control-with-close-relatives
                            - other
                        description:
                          type: string
                          description: Can be used as a complement to "type" to describe the type of control in more details. This is particularly useful if the available values are not able to describe perfectly the situation.
                      required:
                        - type
                required:
                  - person
            hasBeneficialOwners:
              type: boolean
              description: True if the company has officials beneficial owners. False if there are no known beneficial owners.
          required:
            - beneficialOwners
      required:
        - fetchedAt
        - data
    BeneficialOwnersResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: Id of the new beneficial owners information object
            fetchedAt:
              type: string
              format: date-time
              description: Date and time when the information was collected from the data provider.
            createdAt:
              type: string
              format: date-time
              description: Date and time when the information was inserted in the system.
            entityId:
              type: string
              format: ObjectId
              description: Id of the entity linked to the beneficial owners information object
            entityType:
              type: string
              enum:
                - Business
              description: Type of the entity linked to the beneficial owners information object
            providerName:
              type: string
              description: Name of the provider used to fetch the beneficial owners information object
          required:
            - fetchedAt
            - createdAt
            - entityId
            - entityType
            - providerName
            - data
        - $ref: '#/components/schemas/BeneficialOwnersRequest'
    BoardMembersRequest:
      type: object
      properties:
        fetchedAt:
          type: string
          format: date-time
          description: Date and time when the information was collected from the data provider. If unknown use the current timestamp.
        data:
          type: object
          description: Board members data
          properties:
            boardMembers:
              type: array
              description: List of board members of the business
              items:
                type: object
                properties:
                  person:
                    type: object
                    description: Information about the person who is the board member. At least one of the unique identifier fields is required
                    properties:
                      entityId:
                        type: string
                        format: ObjectId
                        description: Id of the entity that is the board member. Use this to link it to a previously created entity.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      entityType:
                        type: string
                        enum:
                          - Individual
                        description: Type of the entity. This is only used when entityId is provided.
                      customId:
                        type: string
                        description: Custom Id of the entity who is the board member. This can be used to link it to a previously created entity.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      nationalIdentifier:
                        type: array
                        description: National identifier of the board member. This can be used to link it to a previously created entity.
                        items:
                          $ref: '#/components/schemas/NationalIdentifierRestricted'
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      firstName:
                        type: string
                        description: First name of the board member. Can be used to link it to a previously created entity together with the last name and birth date.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      lastName:
                        type: string
                        description: Last name of the board member. Can be used to link it to a previously created entity together with the first name and birth date.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      birthDate:
                        type: string
                        format: date-time
                        description: Birth date of the board member. Can be used to link it to a previously created entity together with the first name and last name.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      groups:
                        type: array
                        description: List of groups the board member should be added to.
                        items:
                          type: string
                          format: ObjectId
                          example: 620a2958bfc1d7a803398a6d
                      citizenship:
                        type: array
                        description: List of the countries of citizenship of the board member
                        items:
                          type: string
                          example: SWE
                          format: ISO 3166 ALPHA-3
                      countryResidence:
                        type: string
                        example: SWE
                        format: ISO 3166 ALPHA-3
                        description: Country of residence of the board member
                  roles:
                    type: array
                    description: List of the roles of this board member
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of role
                          enum:
                            - ceo
                            - member
                            - chairman
                            - auditor
                            - other
                        description:
                          type: string
                          description: Can be used as a complement to "type" to describe the role in more details. This is particularly useful if the available values are not able to describe perfectly the situation.
                      required:
                        - type
                required:
                  - person
          required:
            - boardMembers
      required:
        - fetchedAt
        - data
    BoardMembersResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: Id of the new board members information object
            fetchedAt:
              type: string
              format: date-time
              description: Date and time when the information was collected from the data provider.
            createdAt:
              type: string
              format: date-time
              description: Date and time when the information was inserted in the system.
            entityId:
              type: string
              format: ObjectId
              description: Id of the entity linked to the board members information object
            entityType:
              type: string
              enum:
                - Business
              description: Type of the entity linked to the board members information object
            providerName:
              type: string
              description: Name of the provider used to fetch the board members information object
          required:
            - fetchedAt
            - createdAt
            - entityId
            - entityType
            - providerName
            - data
        - $ref: '#/components/schemas/BoardMembersRequest'
    SignatoriesRequest:
      type: object
      properties:
        fetchedAt:
          type: string
          format: date-time
          description: Date and time when the information was collected from the data provider. If unknown use the current timestamp.
        data:
          type: object
          description: Signatories data
          properties:
            signatories:
              type: array
              description: List of signatories of the business
              items:
                type: object
                properties:
                  person:
                    type: object
                    description: Information about the person who is the signatory. At least one of the unique identifier fields is required
                    properties:
                      entityId:
                        type: string
                        format: ObjectId
                        description: Id of the entity that is the signatory. Use this to link it to a previously created entity.
                        example: 620a2958bfc1d7a803398a6d
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      entityType:
                        type: string
                        enum:
                          - Individual
                        description: Type of the entity. This is only used when entityId is provided.
                      customId:
                        type: string
                        description: Custom Id of the entity who is the signatory. This can be used to link it to a previously created entity.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      nationalIdentifier:
                        type: array
                        description: National identifier of the signatory. This can be used to link it to a previously created entity.
                        items:
                          $ref: '#/components/schemas/NationalIdentifierRestricted'
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      firstName:
                        type: string
                        description: First name of the signatory. Can be used to link it to a previously created entity together with the last name and birth date.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      lastName:
                        type: string
                        description: Last name of the signatory. Can be used to link it to a previously created entity together with the first name and birth date.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      birthDate:
                        type: string
                        format: date-time
                        description: Birth date of the signatory. Can be used to link it to a previously created entity together with the first name and last name.
                        externalDocs:
                          description: Unique Identifier
                          url: /#section/Introduction/Unique-Identifier
                      groups:
                        type: array
                        description: List of groups the signatory should be added to.
                        items:
                          type: string
                          format: ObjectId
                          example: 620a2958bfc1d7a803398a6d
                      citizenship:
                        type: array
                        description: List of the countries of citizenship of the signatory
                        items:
                          type: string
                          example: SWE
                          format: ISO 3166 ALPHA-3
                      countryResidence:
                        type: string
                        example: SWE
                        format: ISO 3166 ALPHA-3
                        description: Country of residence of the signatory
                  roles:
                    type: array
                    description: List of the roles of this signatory
                    items:
                      type: object
                      properties:
                        type:
                          type: string
                          description: Type of role
                          enum:
                            - ceo
                            - member
                            - chairman
                            - auditor
                            - other
                        description:
                          type: string
                          description: Can be used as a complement to "type" to describe the role in more details. This is particularly useful if the available values are not able to describe perfectly the situation.
                        fromDate:
                          type: string
                          format: date-time
                          description: Date from which the person has this role
                        toDate:
                          type: string
                          format: date-time
                          description: Date until which the person has this role. Can be set to a future date if there is a known end date.
                      required:
                        - type
                  isLimitedAdminSign:
                    type: boolean
                    description: Indicates if the signatory has limited signatory rights (e.g. can sign only up to a certain amount or only for administrative matters)
                required:
                  - person
            signingRules:
              type: string
              description: Extract of the legal statement describing the signing rules that apply to this business.
      required:
        - fetchedAt
        - data
    SignatoriesResponse:
      allOf:
        - type: object
          properties:
            id:
              type: string
              format: ObjectId
              description: Id of the new board members information object
              example: 620a2958bfc1d7a803398a6d
            fetchedAt:
              type: string
              format: date-time
              description: Date and time when the information was collected from the data provider.
            createdAt:
              type: string
              format: date-time
              description: Date and time when the information was inserted in the system.
            entityId:
              type: string
              format: ObjectId
              description: Id of the entity linked to the board members information object
              example: 620a2958bfc1d7a803398a6d
            entityType:
              type: string
              enum:
                - Business
              description: Type of the entity linked to the board members information object
            providerName:
              type: string
              description: Name of the provider used to fetch the board members information object
          required:
            - id
            - fetchedAt
            - createdAt
            - entityId
            - entityType
            - providerName
            - data
        - $ref: '#/components/schemas/SignatoriesRequest'
    FormAnswer:
      allOf:
        - type: object
          required:
            - entity
            - formId
          properties:
            entity:
              type: object
              description: Entity that submitted the form answers
              required:
                - id
                - type
              properties:
                id:
                  type: string
                  format: ObjectId
                  example: 620a2958bfc1d7a803398a6d
                  description: Id of the entity
                type:
                  type: string
                  description: Type of the entity
                  enum:
                    - Individual
                    - Business
                    - Account
                    - Product
            formId:
              type: string
              format: ObjectId
              example: 620a2958bfc1d7a803398a6d
              description: Form that was used to submit the answers
            submittedAt:
              type: string
              format: date-time
              description: The time at which the form answer was submitted. Set by default to now.
            activities:
              type: string
              description: Description of the business activities
            address:
              type: string
              description: Street address of the entity
            nationalIdentifier:
              type: array
              description: National identifier
              items:
                $ref: '#/components/schemas/NationalIdentifier'
            alternativeBeneficialOwners:
              type: array
              description: Alternative beneficial owners of the business. This should be used when there is no beneficial owner for this business.
              items:
                allOf:
                  - $ref: '#/components/schemas/RelatedEntity'
                  - $ref: '#/components/schemas/RelatedEntityRole'
            beneficialOwner:
              type: string
              description: Whether the business has beneficial owners. If yes should use the "beneficialOwners" field otherwise the "alternativeBeneficialOwners" field.
              enum:
                - 'yes'
                - 'no'
            beneficialOwners:
              type: array
              description: Beneficial owners of the business. This should be used when there are official beneficial owners for this business.
              items:
                allOf:
                  - $ref: '#/components/schemas/RelatedEntity'
                  - type: object
                    required:
                      - controlType
                      - familyControl
                    properties:
                      controlType:
                        description: Information about the control exercised on the business by the related individual
                        oneOf:
                          - $ref: '#/components/schemas/DirectControlTypes'
                          - $ref: '#/components/schemas/IndirectControlTypes'
                      familyControl:
                        type: string
                        description: Whether the related individual exercise control together with close family members
                        enum:
                          - 'yes'
                          - 'no'
            citizenship:
              type: array
              description: Citizenship countries of the individual
              items:
                type: object
                properties:
                  country:
                    type: string
                    format: ISO 3166 ALPHA-3
                    description: Country of citizenship in alpha-3 iso format
                    example: SWE
                  connections:
                    type: array
                    items:
                      type: string
                      description: Type of connection to the country of citizenship
                      enum:
                        - noConnection
                        - stayingMoreThan180Days
                        - haveInvestmentsOrBusiness
                        - nationallyRegistered
                        - moneyTransfers
            city:
              type: string
              description: City of the individual
            companyName:
              type: string
              description: Name of the business
            custom:
              type: object
              description: Answers to custom questions that are not officially supported. This is a hashmap with question identifiers as keys and free text answers as values.
              additionalProperties:
                x-additionalPropertiesName: questionIdentifier
                type: string
                description: Free text answer to the custom question.
            dateOfBirth:
              type: string
              format: date-time
              description: Date of birth of the individual
            email:
              type: string
              format: email
              description: Contact email of the business or individual
            employmentStatus:
              type: string
              description: Employment status of the individual
              enum:
                - fullTime
                - partTime
                - student
                - unemployed
                - retired
            expectedTransactionBehaviour:
              type: array
              description: |
                Expected transaction behaviour according to the business or individual. This is an array with one item per combination of currency and transaction type configuration.
              items:
                type: object
                required:
                  - currency
                properties:
                  currency:
                    type: string
                    description: Currency for the expected behaviour in the 3 letters format from ISO 4217
                  transactionTypeConfiguration:
                    type: object
                    description: Transaction types to be included in the expected behaviour. If that field is omitted then all types are included in the behaviour.
                    required:
                      - or
                    properties:
                      or:
                        type: array
                        description: List of the "OR" conditions.
                        items:
                          type: object
                          required:
                            - and
                          properties:
                            and:
                              type: array
                              description: List of the "AND" conditions for that "OR" block.
                              items:
                                type: object
                                required:
                                  - inclusion
                                  - transactionTypeId
                                properties:
                                  inclusion:
                                    description: describe if the transaction type should be included or excluded. "excluded" will use the transaction type with a "NOT" condition.
                                    type: string
                                    enum:
                                      - included
                                      - excluded
                                  transactionTypeId:
                                    type: string
                                    description: ID of the transaction type to consider
                                    format: ObjectId
                                    example: 620a2958bfc1d7a803398a6d
                  incoming:
                    allOf:
                      - type: object
                        description: Expected transaction behaviour for incoming transactions in that currency and transaction type configuration.
                      - $ref: '#/components/schemas/ExpectedTransactionBehaviour'
                  outgoing:
                    allOf:
                      - type: object
                        description: Expected transaction behaviour for outgoing transactions in that currency and transaction type configuration.
                      - $ref: '#/components/schemas/ExpectedTransactionBehaviour'
                  process:
                    allOf:
                      - type: object
                        description: Expected transaction behaviour for processed transactions in that currency and transaction type configuration.
                      - $ref: '#/components/schemas/ExpectedTransactionBehaviour'
                  total:
                    allOf:
                      - type: object
                        description: Expected transaction behaviour for all transactions in that currency and transaction type configuration.
                      - $ref: '#/components/schemas/ExpectedTransactionBehaviour'
            firstName:
              type: string
              description: First name of the individual
            forecastedTurnover:
              type: object
              description: Forecasted turnover for the current year
              required:
                - value
                - currency
              properties:
                value:
                  type: number
                  description: Amount
                currency:
                  type: string
                  description: Currency in the 3 letters format from ISO 4217
                  example: USD
            industry:
              type: string
              description: Industry of the business
              enum:
                - agricultureForestryFishing
                - miningQuarrying
                - manufacturing
                - electricityGasSteamAirConditioningSupply
                - waterSupplySewerageWasteManagementRemediationActivities
                - construction
                - wholesaleRetailTradeRepairMotorVehiclesMotorcycles
                - transportationStorage
                - accommodationFoodServiceActivities
                - informationCommunication
                - financialInsuranceActivities
                - realEstateActivities
                - professionalScientificTechnicalActivities
                - administrativeSupportServiceActivities
                - publicAdministrationDefenceCompulsorySocialSecurity
                - education
                - humanHealthSocialWorkActivities
                - artsEntertainmentRecreation
                - otherServiceActivities
                - activitiesHouseholdsEmployersUndifferentiatedGoodsServicesProducingActivitiesHouseholdsOwnUse
                - activitiesExtraterritorialOrganisationsBodies
            isFinancialInstitution:
              type: string
              description: Whether the business is a financial institution
              enum:
                - 'yes'
                - 'no'
            lastName:
              type: string
              description: Last name of the individual
            legalForm:
              type: object
              description: Information about the legal form of the business
              required:
                - options
              properties:
                options:
                  type: string
                  description: Type of the legal form of the business
                  enum:
                    - limited-liability-company
                    - economic-association
                    - sole-proprietorship
                    - branch
                    - general-partnership
                    - non-profit-making-association
                    - limited-partnership
                    - foundation
                    - foreign-company
                    - other
                    - unknown
                other:
                  type: string
                  description: Description of the legal form of the business. Only used if "options" is "other"
            listedFinancialMarket:
              type: object
              description: Information about the financial market where the business is listed
              required:
                - option
              properties:
                option:
                  type: string
                  description: Whether the business is listed on a financial market
                  enum:
                    - 'yes'
                    - 'no'
                market:
                  type: string
                  description: The financial market where the business is listed. Only used if "option" is "yes".
            operationStartDate:
              type: string
              format: date-time
              description: The date the operations of the business started.
            organizationNumber:
              type: object
              description: Information about the registration number and country of the business.
              required:
                - country
                - registrationNumber
              properties:
                country:
                  type: string
                  format: ISO 3166 ALPHA-3
                  description: Country of registration in alpha-3 iso format
                  example: SWE
                registrationNumber:
                  type: string
                  description: The registration number. The format depends of the country chosen.
            ownerStructure:
              type: string
              description: Free text description of the ownership structure of the business
            pep:
              allOf:
                - $ref: '#/components/schemas/Pep'
                - type: object
                  required:
                    - isPep
            phoneNumber:
              type: string
              description: The phone number of the individual in the 164 phone number format
            postalCode:
              type: string
              description: The postal code of the individual
            previousTurnover:
              type: object
              description: Turnover of the business for the previous year
              required:
                - value
                - currency
              properties:
                value:
                  type: number
                  description: Amount
                currency:
                  type: string
                  description: Currency in the 3 letters format from ISO 4217
                  example: USD
            products:
              type: object
              description: Products used by the individual or the business.
              required:
                - options
              properties:
                options:
                  type: array
                  description: List of the products. There is no format validation but it is recommended to use product codes or similar so that it can easily be used programmatically.
                  items:
                    type: string
                other:
                  type: string
                  description: Free text description of the product. Only used when one of the "options" is "other".
            purpose:
              type: object
              description: Purposes for using the products or services offered.
              required:
                - options
              properties:
                options:
                  type: array
                  description: List of the purposes. There is no format validation but it is recommended to use purpose codes or similar so that it can easily be used programmatically.
                  items:
                    type: string
                other:
                  type: string
                  description: Free text description of the purpose. Only used when one of the "options" is "other".
            residence:
              type: array
              description: Countries of residence of the individual or business
              items:
                type: string
                format: ISO 3166 ALPHA-3
                example: SWE
            salary:
              type: object
              description: Monthly gross salary of the individual
              required:
                - value
                - currency
              properties:
                value:
                  type: number
                  description: Amount
                currency:
                  type: string
                  description: Currency in the 3 letters format from ISO 4217
                  example: USD
            signatories:
              type: array
              description: Signatories of the business
              items:
                allOf:
                  - $ref: '#/components/schemas/RelatedEntity'
                  - $ref: '#/components/schemas/RelatedEntityRole'
            signer:
              type: object
              description: Information about the person who signed and submitted the form answers
              properties:
                nationalIdentifier:
                  type: array
                  description: National identifier of the signer
                  items:
                    $ref: '#/components/schemas/NationalIdentifier'
                firstName:
                  type: string
                  description: First name of the signer
                lastName:
                  type: string
                  description: Last name of the signer
                role:
                  type: string
                  description: Role of the signer in the business
                email:
                  type: string
                  format: email
                  description: Email address of the signer
                phoneNumber:
                  type: string
                  description: The phone number of the signer in the 164 phone number format
                confirm:
                  type: string
                  description: Whether the signer has confirmed the answers submitted were correct to the best of their knowledge.
                  enum:
                    - 'yes'
                    - 'no'
            sourceOfFunds:
              type: object
              description: Information about the source of funds
              required:
                - options
              properties:
                options:
                  type: array
                  description: Type of the source of funds
                  items:
                    $ref: '#/components/schemas/SourceOfFunds'
                other:
                  type: string
                  description: Description of the source of funds. Only used if one of the "options" is "other"
            sourceOfWealth:
              type: object
              description: Information about the source of wealth
              required:
                - options
              properties:
                options:
                  type: array
                  description: Type of the source of wealth
                  items:
                    $ref: '#/components/schemas/SourceOfFunds'
                other:
                  type: string
                  description: Description of the source of wealth. Only used if one of the "options" is "other"
            sourceOfWealthAmount:
              type: object
              description: Monthly income from the selected source of wealth
              required:
                - value
                - currency
              properties:
                value:
                  type: number
                  description: Amount
                currency:
                  type: string
                  description: Currency in the 3 letters format from ISO 4217
                  example: USD
            stateOwned:
              type: string
              description: Whether the business is state owned
              enum:
                - 'yes'
                - 'no'
            taxResidency:
              type: array
              description: Countries of tax residency of the individual or business
              items:
                type: string
                format: ISO 3166 ALPHA-3
                example: SWE
            tin:
              type: string
              description: Tax identification number
            txMonitoringThresholds:
              type: object
              deprecated: true
              description: |
                Deprecated. Use expectedTransactionBehaviour instead.

                Expected transactional behaviour according to the business or individual. This is a two dimensional hashmap indexed on currency and country. The currency is in the 3 letters format from ISO 4217 and the country in the ISO 3166 ALPHA-3 format.
              additionalProperties:
                x-additionalPropertiesName: currency
                description: Expected transactional behaviour in that specific currency according to the business or individual. Currency is in the 3 letters format from ISO 4217.
                type: object
                additionalProperties:
                  x-additionalPropertiesName: country
                  description: Expected transaction behaviour in that specific country (and in the parent currency) according to the business or individual. Country is in the ISO 3166 ALPHA-3 format.
                  type: object
                  properties:
                    incoming:
                      allOf:
                        - $ref: '#/components/schemas/TransactionPattern'
                        - type: object
                          description: Expected transaction behaviour for incoming transactions in that country and currency.
                    outgoing:
                      allOf:
                        - $ref: '#/components/schemas/TransactionPattern'
                        - type: object
                          description: Expected transaction behaviour for outgoing transactions in that country and currency.
                    process:
                      allOf:
                        - $ref: '#/components/schemas/TransactionPattern'
                        - type: object
                          description: Expected transaction behaviour for processed transactions in that country and currency.
                    total:
                      allOf:
                        - $ref: '#/components/schemas/TransactionPattern'
                        - type: object
                          description: Expected transaction behaviour for transactions in all directions (incoming, outgoing and processed) in that country and currency.
            website:
              type: string
              description: Website of the business
        - $ref: '#/components/schemas/FormAnswerUpdate'
    FormAnswerSaved:
      allOf:
        - type: object
          required:
            - id
            - createdAt
            - updatedAt
          properties:
            id:
              type: string
              format: ObjectId
              example: 620a2958bfc1d7a803398a6d
              description: Form answer object id
            createdAt:
              type: string
              format: date-time
              description: Time when the form answer was inserted in the Pingwire system
            submittedAt:
              type: string
              format: date-time
              description: The time at which the form answer was submitted. Set by default to now
            updatedAt:
              type: string
              format: date-time
              description: Time when the form answer was updated the latest
        - $ref: '#/components/schemas/FormAnswer'
    FormAnswerUpdate:
      type: object
      properties:
        status:
          type: string
          description: |
            Status of the form answers.
            * `pending` - Form answers are submitted by the customer but not reviewed yet by anyone.
            * `completed` - Form answers have been reviewed by an AML officer and approved.
            * `rejected` - Form answers have been reviewed by an AML officer and discarded.
            * `withdrawn` - Form answers were submitted by the customer but they decided to remove their submission.
          enum:
            - pending
            - completed
            - rejected
            - withdrawn
    RelatedEntity:
      allOf:
        - type: object
          required:
            - firstName
            - lastName
          properties:
            firstName:
              type: string
              description: First name of the related individual
            lastName:
              type: string
              description: Last name of the related individual
            citizenship:
              type: array
              description: Citizenship countries of the related individual
              items:
                type: object
                properties:
                  country:
                    type: string
                    format: ISO 3166 ALPHA-3
                    description: Country of citizenship in alpha-3 iso format
                    example: SWE
                  connections:
                    type: array
                    items:
                      type: string
                      description: Type of connection to the country of citizenship
                      enum:
                        - noConnection
                        - stayingMoreThan180Days
                        - haveInvestmentsOrBusiness
                        - nationallyRegistered
                        - moneyTransfers
            taxResidency:
              type: array
              description: Countries of tax residency in alpha-3 iso format
              items:
                type: string
                format: ISO 3166 ALPHA-3
                example: SWE
            dateOfBirth:
              type: string
              format: date-time
              description: Date of birth of the related individual
            nationalIdentifier:
              type: array
              description: National identifier of the related individual
              items:
                $ref: '#/components/schemas/NationalIdentifier'
            address:
              type: string
              description: Street address of the related individual
            city:
              type: string
              description: City of the related individual
            postalCode:
              type: string
              description: Postal code of the related individual
            residence:
              type: array
              description: Countries of residence of the related individual
              items:
                type: string
                format: ISO 3166 ALPHA-3
                example: SWE
            isPep:
              description: If the related individual is a PEP or not (including related to a PEP individual)
            pep:
              description: Information about the PEP status of the related individual. This field is required if "isPep" is "yes".
        - $ref: '#/components/schemas/Pep'
    RelatedEntityRole:
      type: object
      properties:
        role:
          type: object
          description: Role of the related individual in the business
          required:
            - options
          properties:
            options:
              type: string
              description: Type of the role
              enum:
                - ceo
                - boardMember
                - other
            other:
              type: string
              description: Description of the role. Only used if the chosen option is "other".
    TransactionTableSetupColumns:
      type: array
      items:
        type: object
        properties:
          source:
            type: string
            description: The source of the column to display on the table
            enum:
              - typeConfiguration
              - incoming.volume
              - incoming.monthlyVolume
              - outgoing.volume
              - outgoing.monthlyVolume
              - processing.volume
              - processing.monthlyVolume
              - total.volume
              - total.monthlyVolume
              - netVolume
              - netMonthlyVolume
              - incoming.frequency
              - incoming.monthlyFrequency
              - outgoing.frequency
              - outgoing.monthlyFrequency
              - processing.frequency
              - processing.monthlyFrequency
              - total.frequency
              - total.monthlyFrequency
          enabled:
            type: boolean
            description: Whether or not the column should be displayed
    TransactionPattern:
      type: object
      properties:
        monthlyVolume:
          type: number
          description: Volume of transactions during a month. Amount is expressed in the parent currency
        monthlyFrequency:
          type: number
          description: Number of transactions during a month.
        max:
          type: number
          description: Highest expected amount for a single transaction.
        median:
          type: number
          description: Typical expected amount (median) for a single transaction.
        expectedTransactionTimeline:
          type: object
          description: For how long the behaviour is expected
          properties:
            amount:
              type: integer
            unit:
              type: string
              enum:
                - day
                - month
                - year
    TransactionParty:
      type: object
      properties:
        electronicId:
          type: string
          description: For transactions authorized trough BankId, the serial number of the certificate could be used.
        ip:
          type: string
          description: IP address from which the transaction was initiated/received
        transactionCarrierType:
          type: string
          description: Channel used to execute the transaction. When no carrier has been used, “Not relevant” should be selected
          enum:
            - casino-chip
            - bank-money-order
            - cheque
            - card
            - swish
            - bank-giro
            - card-terminal
            - service-box
            - agent
            - other
            - unknown
            - not-relevant
        transactionCarrierReference:
          type: string
          description: Reference for carrier of transactions. For example, telephone number for swish, card number for car terminal, bankgiro for BankGiro transaction.
        transactionCountry:
          type: string
          description: Country from/to where the transaction was sent
          format: ISO 3166 ALPHA-3
        hardwareId:
          type: string
          description: Hardware id used to authorize the transaction.
    TransactionTypeConfiguration:
      type: array
      items:
        type: object
        properties:
          or:
            type: array
            items:
              type: object
              properties:
                and:
                  type: array
                  items:
                    type: object
                    properties:
                      inclusion:
                        type: string
                        description: Whether or not to include the transaction type
                        enum:
                          - included
                          - excluded
                      transactionTypeId:
                        type: string
                        format: ObjectId
                        example: 62b9437318fe4517089b2833
                        description: ID of he transaction type to include/exclude
    Pep:
      type: object
      description: Information about the PEP status of the individual
      properties:
        isPep:
          type: string
          enum:
            - 'yes'
            - 'no'
          description: If the individual is a PEP or not (including related to a PEP individual)
        pep:
          type: object
          description: Information about the PEP status of the individual. This field is required if "isPep" is "yes".
          required:
            - country
            - role
            - relation
          properties:
            country:
              type: string
              format: ISO 3166 ALPHA-3
              example: SWE
              description: Country of the PEP role
            role:
              type: string
              description: Type of PEP role
              enum:
                - headOfStateOrGovernmentMinister
                - legislativeMember
                - politicalPartyBoardMember
                - highCourtJudge
                - seniorAuditOrCentralBankOfficial
                - ambassadorMilitaryOfficer
                - stateOwnedEnterpriseOfficial
            relation:
              type: string
              description: Relation of the individual to the person with an official role
              enum:
                - iAmPEP
                - spouse
                - registeredPartner
                - cohabitant
                - child
                - childSpouseOrPartner
                - parent
                - knownAssociate
            startDate:
              type: string
              format: date-time
              description: Start date of the PEP role
            endDate:
              type: string
              format: date-time
              description: End date of the PEP role
    NationalIdentifier:
      allOf:
        - $ref: '#/components/schemas/NationalIdentifierRestricted'
      type: object
      required:
        - type
      properties:
        identifier:
          description: Identification number. The format depends of the type and the country chosen.
      oneOf:
        - type: object
          title: Specific countries national identifiers
          properties:
            country:
              type: string
              enum:
                - SWE
                - FIN
                - DKK
                - GBR
                - ZAF
            type:
              type: string
              enum:
                - socialSecurityNumber
              description: Type of the national identifier.
        - type: object
          title: Other countries national identifiers
          properties:
            country:
              type: string
            type:
              type: string
              enum:
                - socialSecurityNumber
                - nationalInsuranceNumber
                - nationalID
                - passportNumber
                - driversLicenseNumber
                - other
              description: Type of the national identifier.
    NationalIdentifierRestricted:
      type: object
      required:
        - country
        - identifier
      properties:
        country:
          type: string
          format: ISO 3166 ALPHA-3
          example: SWE
          description: Country of the national identifier
        identifier:
          type: string
          description: Identification number. The format depends of the country chosen.
    ExpectedTransactionBehaviour:
      type: object
      properties:
        monthlyVolume:
          type: number
          description: Volume of transactions during a month. Expressed in the parent currency.
        monthlyFrequency:
          type: number
          description: Number of transactions during a month.
        median:
          type: number
          description: Typical expected amount (median) for a single transaction. Expressed in the parent currency.
        max:
          type: number
          description: Highest expected amount for a single transaction. Expressed in the parent currency.
        expectedTransactionTimeline:
          type: object
          description: Timeline during which the described behaviour is expected
          required:
            - amount
            - unit
          properties:
            amount:
              type: number
              description: Number of days/months/years
            unit:
              type: string
              description: Unit of time used to define the timeline
              enum:
                - day
                - month
                - year
    EntityTypes:
      $ref: '#/components/schemas/entityTypes'
    ConnectionTypes:
      $ref: '#/components/schemas/connectionTypes'
    ProductTypes:
      $ref: '#/components/schemas/productTypes'
    ProductPartyRoles:
      $ref: '#/components/schemas/productPartyRoles'
    SourceOfFunds:
      $ref: '#/components/schemas/sourceOfFunds'
    transactionStatuses:
      type: string
      description: Status of the transaction. Defaults to `completed`.
      enum:
        - pending
        - completed
        - failed
        - cancelled
    DirectControlTypes:
      $ref: '#/components/schemas/directControlTypes'
    IndirectControlTypes:
      $ref: '#/components/schemas/indirectControlTypes'
    CaseStatuses:
      $ref: '#/components/schemas/caseStatuses'
    CasePriorities:
      $ref: '#/components/schemas/casePriorities'
    Individual-2:
      type: object
      properties:
        type:
          type: string
          enum:
            - Individual
        id:
          type: string
          format: ObjectId
          description: ID of an already created individual
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        customId:
          type: string
          description: Unique external identifier
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        swedishSocialSecurityNumber:
          deprecated: true
          type: string
          description: Swedish social security number. Deprecated, use nationalIdentifier instead
          format: yyyymmddxxxx
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        residence:
          type: string
          example: SWE
          format: ISO 3166 ALPHA-3
          description: Country of residence
        nationalIdentifier:
          description: National identifiers of the individual
          externalDocs:
            description: Unique identifier (country + identifier)
            url: /#section/Introduction/Unique-Identifier
          type: array
          items:
            $ref: '#/components/schemas/NationalIdentifierRestricted'
        firstName:
          type: string
          description: First name of the individual
        lastName:
          type: string
          description: Last name of the individual
        birthDate:
          type: string
          format: date-time
          description: Birth date of the individual
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
        email:
          type: string
          description: Contact email of the individual
          format: email
        phoneNumber:
          type: string
          description: Contact phone number of the individual
      required:
        - type
    Account:
      type: object
      properties:
        type:
          type: string
          enum:
            - Account
        id:
          type: string
          format: ObjectId
          description: ID of an already created account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        customId:
          type: string
          description: Unique external identifier
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        iban:
          type: string
          description: IBAN (International Bank Account Number) of the account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        bankgiroNumber:
          type: string
          description: Bankgiro number associated to the account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        plusgiroNumber:
          type: string
          description: Plusgiro number associated to the account
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        bban:
          type: string
          description: BBAN (Basic Bank Account Number) of the account
          externalDocs:
            description: Unique identifier (together with country)
            url: /#section/Introduction/Unique-Identifier
        provider:
          type: string
          description: Identifier of the institution issuing the account.
        nonBankingInstitution:
          type: boolean
          description: Whether the institution issuing the account is a non banking institution
        source:
          type: string
        opened:
          type: string
          format: date-time
          description: The date the account was opened
        closed:
          type: string
          format: date-time
          description: The date the account was closed
        bankAccountStatus:
          type: string
          description: Status of the account at the bank
          enum:
            - active
            - closed-by-client
            - closed-by-operator
            - closed
            - blocked
        bic:
          type: string
          description: The BIC (Bank identification code) associated to the account
        country:
          type: string
          description: Country where the account is registered
          format: ISO 3166 ALPHA-3
        currency:
          type: string
          description: Currency of the account
          format: ISO 4217 code
          example: USD
        accountName:
          type: string
          description: The name of the account.
        product:
          type: string
          description: The banks product name for this account
        accountType:
          type: string
          description: Type of bank account
          enum:
            - business
            - checking
            - credit-line
            - external
            - investment
            - mortgage
            - loan
            - other
            - pension
            - savings
            - bank-giro
            - bank-account
            - securities-account
            - prepaid-card
            - company-account
            - investment-savings-account
            - capital-insurance
            - client-account
            - credit-card-account
            - life-insurance
            - loan-account
            - unknown
            - plus-giro-account
            - gaming-account
            - swish-number
            - occupational-pensions-insurance
            - foreign-currency-account
            - share-or-equity-funds-account
            - check
            - money-order
            - e-wallet
            - card
            - transaction-reference
            - generated-transaction-reference
            - iban-number
            - psp-account
            - safe-deposit-box
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
      required:
        - type
    Business-2:
      type: object
      title: Business
      properties:
        type:
          type: string
          enum:
            - Business
        id:
          type: string
          format: ObjectId
          description: ID of an already created business
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        customId:
          type: string
          description: Unique external identifier
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        swedishOrganizationNumber:
          deprecated: true
          type: string
          description: Swedish organisation number. Deprecated, use registrationNumber and residence instead
          format: xxxxxxxxxx
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        registrationNumber:
          type: string
          description: Registration number of the business
          externalDocs:
            description: Unique identifier (in combination with residence)
            url: /#section/Introduction/Unique-Identifier
        residence:
          type: string
          format: ISO 3166 ALPHA-3
          description: Country of registration
        name:
          type: string
          description: Name of the business
        incorporationLegalForm:
          type: string
          description: Type of business.
          enum:
            - limited-liability-company
            - economic-association
            - sole-proprietorship
            - branch
            - general-partnership
            - non-profit-making-association
            - limited-partnership
            - foundation
            - foreign-company
            - other
            - unknown
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
        email:
          type: string
          description: Contact email of the business
          format: email
        phoneNumber:
          description: Contact phone number of the business
          type: string
      required:
        - type
    Car-2:
      type: object
      title: Car
      properties:
        type:
          type: string
          enum:
            - Car
        id:
          type: string
          format: ObjectId
          description: ID of an already created car
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        customId:
          type: string
          description: Unique external identifier
          externalDocs:
            description: Unique identifier
            url: /#section/Introduction/Unique-Identifier
        registrationNumber:
          type: string
          description: Registration number of the car
          externalDocs:
            description: Unique identifier (together with registrationCountry)
            url: /#section/Introduction/Unique-Identifier
        registrationCountry:
          type: string
          description: Registration country of the car
          format: ISO 3166 ALPHA-3
        groups:
          description: List of groups the entity should be associated to
          type: array
          items:
            type: string
            format: ObjectId
      required:
        - type
    Product-2:
      type: object
      oneOf:
        - $ref: '#/components/schemas/ProductPartySwish'
        - $ref: '#/components/schemas/ProductPartyLineOfBusiness'
      discriminator:
        propertyName: productType
        mapping:
          swish: '#/components/schemas/ProductPartySwish'
          lineOfBusiness: '#/components/schemas/ProductPartyLineOfBusiness'
    entityTypes:
      type: string
      description: Type of the entity
      enum:
        - Individual
        - Business
        - Car
        - Account
        - Product
    connectionTypes:
      type: string
      description: Type of connection
      enum:
        - Custom
    productTypes:
      type: string
      description: Type of product
      enum:
        - swish
        - lineOfBusiness
    productPartyRoles:
      type: string
      description: Role of a product party
      enum:
        - product-holder
        - connected-account
    sourceOfFunds:
      type: string
      enum:
        - salaryPension
        - investmentReturns
        - inheritanceGift
        - onlineGambling
        - cryptoTrading
        - holding
        - operation
        - loanProceeds
        - equityFinancing
        - grantsOrSubsidies
        - saleOfAssets
        - internalCashReserves
        - savings
        - securities
        - dividends
        - socialBenefits
        - realEstateSold
        - selfEmployment
        - scholarship
        - incomeFromFamilyMembers
        - winningsLotteriesBets
        - other
    directControlTypes:
      type: object
      required:
        - direct
        - type
      properties:
        direct:
          type: string
          description: Whether the control is exercised directly or indirectly
          enum:
            - 'yes'
        type:
          type: string
          description: Type of control
          enum:
            - shareholder
            - votingRight
            - agreementMembership
            - appointmentRight
            - trustee
            - boardMember
            - beneficiary
            - settlor
            - other
        ownership:
          type: number
          minimum: 0
          maximum: 100
          description: Extent of the ownership in percent. Only used if "type" is "shareholder" or "votingRight"
        other:
          type: string
          description: Description of the ownership type. Only used if "type" is "other".
    indirectControlTypes:
      type: object
      required:
        - direct
        - type
      properties:
        direct:
          type: string
          description: Whether the control is exercised directly or indirectly
          enum:
            - 'no'
        type:
          type: string
          description: Type of control
          enum:
            - shareholder
            - votingRight
            - agreementMembership
            - appointmentRight
            - trustee
            - boardMember
            - beneficiary
            - settlor
            - otherCompanies
            - other
        ownership:
          type: number
          minimum: 0
          maximum: 100
          description: Extent of the ownership in percent. Only used if "type" is "shareholder" or "votingRight"
        other:
          type: string
          description: Description of the ownership type. Only used if "type" is "other".
    caseStatuses:
      type: string
      description: |
        Status of the case.
        - `Open`: the case is open and can be worked on.
        - `Closed`: the case is closed and cannot be worked on anymore.
        - `in-progress`: the case is currently being worked on.
        - `pending`: the case is pending and waiting for some action, for example customer feedback or peer review.
      enum:
        - Open
        - Closed
        - in-progress
        - pending
    casePriorities:
      type: string
      description: |
        Priority of the case.
        - `low`: the case has low priority and can be addressed later.
        - `normal`: the case has normal priority and should be addressed in a reasonable time frame.
        - `high`: the case has high priority and should be addressed as soon as possible.
        - `urgent`: the case has urgent priority and requires immediate attention.
      enum:
        - low
        - normal
        - high
        - urgent
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearerToken
x-tagGroups:
  - name: Get started
    tags:
      - Auth
  - name: Risk Management
    tags:
      - Requests
      - Pings
      - Cases
  - name: Entities
    tags:
      - Individuals
      - Businesses
      - Cars
      - Accounts
      - Products
  - name: KYC Forms
    tags:
      - Forms
      - Form answers
  - name: KYC Data
    tags:
      - Population Register
      - Company Information
      - Beneficial Owners
      - Board Members
      - Signatories
  - name: Other resources
    tags:
      - Risk Classes
      - Rules
      - Members
      - Processes
      - Signals
      - Connections
      - Groups
      - Transaction Table Setup
      - Transaction Types
      - Transaction
